// Generated by jextract

package com.unascribed.jxljxl.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     int have_crop;
 *     int32_t crop_x0;
 *     int32_t crop_y0;
 *     uint32_t xsize;
 *     uint32_t ysize;
 *     JxlBlendInfo blend_info;
 *     uint32_t save_as_reference;
 * };
 * }
 */
public class JxlLayerInfo {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("have_crop"),
        Constants$root.C_INT$LAYOUT.withName("crop_x0"),
        Constants$root.C_INT$LAYOUT.withName("crop_y0"),
        Constants$root.C_INT$LAYOUT.withName("xsize"),
        Constants$root.C_INT$LAYOUT.withName("ysize"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("blendmode"),
            Constants$root.C_INT$LAYOUT.withName("source"),
            Constants$root.C_INT$LAYOUT.withName("alpha"),
            Constants$root.C_INT$LAYOUT.withName("clamp")
        ).withName("blend_info"),
        Constants$root.C_INT$LAYOUT.withName("save_as_reference")
    );
    public static MemoryLayout $LAYOUT() {
        return JxlLayerInfo.$struct$LAYOUT;
    }
    static final VarHandle have_crop$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("have_crop"));
    public static VarHandle have_crop$VH() {
        return JxlLayerInfo.have_crop$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int have_crop;
     * }
     */
    public static int have_crop$get(MemorySegment seg) {
        return (int)JxlLayerInfo.have_crop$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int have_crop;
     * }
     */
    public static void have_crop$set(MemorySegment seg, int x) {
        JxlLayerInfo.have_crop$VH.set(seg, x);
    }
    public static int have_crop$get(MemorySegment seg, long index) {
        return (int)JxlLayerInfo.have_crop$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void have_crop$set(MemorySegment seg, long index, int x) {
        JxlLayerInfo.have_crop$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle crop_x0$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("crop_x0"));
    public static VarHandle crop_x0$VH() {
        return JxlLayerInfo.crop_x0$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int32_t crop_x0;
     * }
     */
    public static int crop_x0$get(MemorySegment seg) {
        return (int)JxlLayerInfo.crop_x0$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int32_t crop_x0;
     * }
     */
    public static void crop_x0$set(MemorySegment seg, int x) {
        JxlLayerInfo.crop_x0$VH.set(seg, x);
    }
    public static int crop_x0$get(MemorySegment seg, long index) {
        return (int)JxlLayerInfo.crop_x0$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void crop_x0$set(MemorySegment seg, long index, int x) {
        JxlLayerInfo.crop_x0$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle crop_y0$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("crop_y0"));
    public static VarHandle crop_y0$VH() {
        return JxlLayerInfo.crop_y0$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int32_t crop_y0;
     * }
     */
    public static int crop_y0$get(MemorySegment seg) {
        return (int)JxlLayerInfo.crop_y0$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int32_t crop_y0;
     * }
     */
    public static void crop_y0$set(MemorySegment seg, int x) {
        JxlLayerInfo.crop_y0$VH.set(seg, x);
    }
    public static int crop_y0$get(MemorySegment seg, long index) {
        return (int)JxlLayerInfo.crop_y0$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void crop_y0$set(MemorySegment seg, long index, int x) {
        JxlLayerInfo.crop_y0$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle xsize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("xsize"));
    public static VarHandle xsize$VH() {
        return JxlLayerInfo.xsize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t xsize;
     * }
     */
    public static int xsize$get(MemorySegment seg) {
        return (int)JxlLayerInfo.xsize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t xsize;
     * }
     */
    public static void xsize$set(MemorySegment seg, int x) {
        JxlLayerInfo.xsize$VH.set(seg, x);
    }
    public static int xsize$get(MemorySegment seg, long index) {
        return (int)JxlLayerInfo.xsize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void xsize$set(MemorySegment seg, long index, int x) {
        JxlLayerInfo.xsize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ysize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ysize"));
    public static VarHandle ysize$VH() {
        return JxlLayerInfo.ysize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t ysize;
     * }
     */
    public static int ysize$get(MemorySegment seg) {
        return (int)JxlLayerInfo.ysize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t ysize;
     * }
     */
    public static void ysize$set(MemorySegment seg, int x) {
        JxlLayerInfo.ysize$VH.set(seg, x);
    }
    public static int ysize$get(MemorySegment seg, long index) {
        return (int)JxlLayerInfo.ysize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ysize$set(MemorySegment seg, long index, int x) {
        JxlLayerInfo.ysize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment blend_info$slice(MemorySegment seg) {
        return seg.asSlice(20, 16);
    }
    static final VarHandle save_as_reference$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("save_as_reference"));
    public static VarHandle save_as_reference$VH() {
        return JxlLayerInfo.save_as_reference$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t save_as_reference;
     * }
     */
    public static int save_as_reference$get(MemorySegment seg) {
        return (int)JxlLayerInfo.save_as_reference$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t save_as_reference;
     * }
     */
    public static void save_as_reference$set(MemorySegment seg, int x) {
        JxlLayerInfo.save_as_reference$VH.set(seg, x);
    }
    public static int save_as_reference$get(MemorySegment seg, long index) {
        return (int)JxlLayerInfo.save_as_reference$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void save_as_reference$set(MemorySegment seg, long index, int x) {
        JxlLayerInfo.save_as_reference$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


