// Generated by jextract

package com.unascribed.jxljxl.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     JxlExtraChannelType type;
 *     uint32_t bits_per_sample;
 *     uint32_t exponent_bits_per_sample;
 *     uint32_t dim_shift;
 *     uint32_t name_length;
 *     int alpha_premultiplied;
 *     float spot_color[4];
 *     uint32_t cfa_channel;
 * };
 * }
 */
public class JxlExtraChannelInfo {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("type"),
        Constants$root.C_INT$LAYOUT.withName("bits_per_sample"),
        Constants$root.C_INT$LAYOUT.withName("exponent_bits_per_sample"),
        Constants$root.C_INT$LAYOUT.withName("dim_shift"),
        Constants$root.C_INT$LAYOUT.withName("name_length"),
        Constants$root.C_INT$LAYOUT.withName("alpha_premultiplied"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("spot_color"),
        Constants$root.C_INT$LAYOUT.withName("cfa_channel")
    );
    public static MemoryLayout $LAYOUT() {
        return JxlExtraChannelInfo.$struct$LAYOUT;
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return JxlExtraChannelInfo.type$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * JxlExtraChannelType type;
     * }
     */
    public static int type$get(MemorySegment seg) {
        return (int)JxlExtraChannelInfo.type$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * JxlExtraChannelType type;
     * }
     */
    public static void type$set(MemorySegment seg, int x) {
        JxlExtraChannelInfo.type$VH.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)JxlExtraChannelInfo.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        JxlExtraChannelInfo.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bits_per_sample$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bits_per_sample"));
    public static VarHandle bits_per_sample$VH() {
        return JxlExtraChannelInfo.bits_per_sample$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t bits_per_sample;
     * }
     */
    public static int bits_per_sample$get(MemorySegment seg) {
        return (int)JxlExtraChannelInfo.bits_per_sample$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t bits_per_sample;
     * }
     */
    public static void bits_per_sample$set(MemorySegment seg, int x) {
        JxlExtraChannelInfo.bits_per_sample$VH.set(seg, x);
    }
    public static int bits_per_sample$get(MemorySegment seg, long index) {
        return (int)JxlExtraChannelInfo.bits_per_sample$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bits_per_sample$set(MemorySegment seg, long index, int x) {
        JxlExtraChannelInfo.bits_per_sample$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle exponent_bits_per_sample$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("exponent_bits_per_sample"));
    public static VarHandle exponent_bits_per_sample$VH() {
        return JxlExtraChannelInfo.exponent_bits_per_sample$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t exponent_bits_per_sample;
     * }
     */
    public static int exponent_bits_per_sample$get(MemorySegment seg) {
        return (int)JxlExtraChannelInfo.exponent_bits_per_sample$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t exponent_bits_per_sample;
     * }
     */
    public static void exponent_bits_per_sample$set(MemorySegment seg, int x) {
        JxlExtraChannelInfo.exponent_bits_per_sample$VH.set(seg, x);
    }
    public static int exponent_bits_per_sample$get(MemorySegment seg, long index) {
        return (int)JxlExtraChannelInfo.exponent_bits_per_sample$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void exponent_bits_per_sample$set(MemorySegment seg, long index, int x) {
        JxlExtraChannelInfo.exponent_bits_per_sample$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dim_shift$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dim_shift"));
    public static VarHandle dim_shift$VH() {
        return JxlExtraChannelInfo.dim_shift$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t dim_shift;
     * }
     */
    public static int dim_shift$get(MemorySegment seg) {
        return (int)JxlExtraChannelInfo.dim_shift$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t dim_shift;
     * }
     */
    public static void dim_shift$set(MemorySegment seg, int x) {
        JxlExtraChannelInfo.dim_shift$VH.set(seg, x);
    }
    public static int dim_shift$get(MemorySegment seg, long index) {
        return (int)JxlExtraChannelInfo.dim_shift$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dim_shift$set(MemorySegment seg, long index, int x) {
        JxlExtraChannelInfo.dim_shift$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle name_length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("name_length"));
    public static VarHandle name_length$VH() {
        return JxlExtraChannelInfo.name_length$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t name_length;
     * }
     */
    public static int name_length$get(MemorySegment seg) {
        return (int)JxlExtraChannelInfo.name_length$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t name_length;
     * }
     */
    public static void name_length$set(MemorySegment seg, int x) {
        JxlExtraChannelInfo.name_length$VH.set(seg, x);
    }
    public static int name_length$get(MemorySegment seg, long index) {
        return (int)JxlExtraChannelInfo.name_length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void name_length$set(MemorySegment seg, long index, int x) {
        JxlExtraChannelInfo.name_length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle alpha_premultiplied$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("alpha_premultiplied"));
    public static VarHandle alpha_premultiplied$VH() {
        return JxlExtraChannelInfo.alpha_premultiplied$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int alpha_premultiplied;
     * }
     */
    public static int alpha_premultiplied$get(MemorySegment seg) {
        return (int)JxlExtraChannelInfo.alpha_premultiplied$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int alpha_premultiplied;
     * }
     */
    public static void alpha_premultiplied$set(MemorySegment seg, int x) {
        JxlExtraChannelInfo.alpha_premultiplied$VH.set(seg, x);
    }
    public static int alpha_premultiplied$get(MemorySegment seg, long index) {
        return (int)JxlExtraChannelInfo.alpha_premultiplied$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void alpha_premultiplied$set(MemorySegment seg, long index, int x) {
        JxlExtraChannelInfo.alpha_premultiplied$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment spot_color$slice(MemorySegment seg) {
        return seg.asSlice(24, 16);
    }
    static final VarHandle cfa_channel$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cfa_channel"));
    public static VarHandle cfa_channel$VH() {
        return JxlExtraChannelInfo.cfa_channel$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t cfa_channel;
     * }
     */
    public static int cfa_channel$get(MemorySegment seg) {
        return (int)JxlExtraChannelInfo.cfa_channel$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t cfa_channel;
     * }
     */
    public static void cfa_channel$set(MemorySegment seg, int x) {
        JxlExtraChannelInfo.cfa_channel$VH.set(seg, x);
    }
    public static int cfa_channel$get(MemorySegment seg, long index) {
        return (int)JxlExtraChannelInfo.cfa_channel$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cfa_channel$set(MemorySegment seg, long index, int x) {
        JxlExtraChannelInfo.cfa_channel$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


