// Generated by jextract

package com.unascribed.jxljxl.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class LibJxl  {

    public static final OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static final OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static final OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static final OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static final OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static final OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * #define JXL_TRUE 1
     * }
     */
    public static int JXL_TRUE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define JXL_FALSE 0
     * }
     */
    public static int JXL_FALSE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define JPEGXL_MAJOR_VERSION 0
     * }
     */
    public static int JPEGXL_MAJOR_VERSION() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define JPEGXL_MINOR_VERSION 9
     * }
     */
    public static int JPEGXL_MINOR_VERSION() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define JPEGXL_PATCH_VERSION 0
     * }
     */
    public static int JPEGXL_PATCH_VERSION() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .JXL_COLOR_SPACE_RGB = 0;
     * }
     */
    public static int JXL_COLOR_SPACE_RGB() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .JXL_COLOR_SPACE_GRAY = 1;
     * }
     */
    public static int JXL_COLOR_SPACE_GRAY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .JXL_COLOR_SPACE_XYB = 2;
     * }
     */
    public static int JXL_COLOR_SPACE_XYB() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .JXL_COLOR_SPACE_UNKNOWN = 3;
     * }
     */
    public static int JXL_COLOR_SPACE_UNKNOWN() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .JXL_WHITE_POINT_D65 = 1;
     * }
     */
    public static int JXL_WHITE_POINT_D65() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .JXL_WHITE_POINT_CUSTOM = 2;
     * }
     */
    public static int JXL_WHITE_POINT_CUSTOM() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .JXL_WHITE_POINT_E = 10;
     * }
     */
    public static int JXL_WHITE_POINT_E() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum .JXL_WHITE_POINT_DCI = 11;
     * }
     */
    public static int JXL_WHITE_POINT_DCI() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum .JXL_PRIMARIES_SRGB = 1;
     * }
     */
    public static int JXL_PRIMARIES_SRGB() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .JXL_PRIMARIES_CUSTOM = 2;
     * }
     */
    public static int JXL_PRIMARIES_CUSTOM() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .JXL_PRIMARIES_2100 = 9;
     * }
     */
    public static int JXL_PRIMARIES_2100() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum .JXL_PRIMARIES_P3 = 11;
     * }
     */
    public static int JXL_PRIMARIES_P3() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum .JXL_TRANSFER_FUNCTION_709 = 1;
     * }
     */
    public static int JXL_TRANSFER_FUNCTION_709() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .JXL_TRANSFER_FUNCTION_UNKNOWN = 2;
     * }
     */
    public static int JXL_TRANSFER_FUNCTION_UNKNOWN() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .JXL_TRANSFER_FUNCTION_LINEAR = 8;
     * }
     */
    public static int JXL_TRANSFER_FUNCTION_LINEAR() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .JXL_TRANSFER_FUNCTION_SRGB = 13;
     * }
     */
    public static int JXL_TRANSFER_FUNCTION_SRGB() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum .JXL_TRANSFER_FUNCTION_PQ = 16;
     * }
     */
    public static int JXL_TRANSFER_FUNCTION_PQ() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum .JXL_TRANSFER_FUNCTION_DCI = 17;
     * }
     */
    public static int JXL_TRANSFER_FUNCTION_DCI() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum .JXL_TRANSFER_FUNCTION_HLG = 18;
     * }
     */
    public static int JXL_TRANSFER_FUNCTION_HLG() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum .JXL_TRANSFER_FUNCTION_GAMMA = 65535;
     * }
     */
    public static int JXL_TRANSFER_FUNCTION_GAMMA() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * enum .JXL_RENDERING_INTENT_PERCEPTUAL = 0;
     * }
     */
    public static int JXL_RENDERING_INTENT_PERCEPTUAL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .JXL_RENDERING_INTENT_RELATIVE = 1;
     * }
     */
    public static int JXL_RENDERING_INTENT_RELATIVE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .JXL_RENDERING_INTENT_SATURATION = 2;
     * }
     */
    public static int JXL_RENDERING_INTENT_SATURATION() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .JXL_RENDERING_INTENT_ABSOLUTE = 3;
     * }
     */
    public static int JXL_RENDERING_INTENT_ABSOLUTE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .JXL_TYPE_FLOAT = 0;
     * }
     */
    public static int JXL_TYPE_FLOAT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .JXL_TYPE_UINT8 = 2;
     * }
     */
    public static int JXL_TYPE_UINT8() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .JXL_TYPE_UINT16 = 3;
     * }
     */
    public static int JXL_TYPE_UINT16() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .JXL_TYPE_FLOAT16 = 5;
     * }
     */
    public static int JXL_TYPE_FLOAT16() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .JXL_NATIVE_ENDIAN = 0;
     * }
     */
    public static int JXL_NATIVE_ENDIAN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .JXL_LITTLE_ENDIAN = 1;
     * }
     */
    public static int JXL_LITTLE_ENDIAN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .JXL_BIG_ENDIAN = 2;
     * }
     */
    public static int JXL_BIG_ENDIAN() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .JXL_BIT_DEPTH_FROM_PIXEL_FORMAT = 0;
     * }
     */
    public static int JXL_BIT_DEPTH_FROM_PIXEL_FORMAT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .JXL_BIT_DEPTH_FROM_CODESTREAM = 1;
     * }
     */
    public static int JXL_BIT_DEPTH_FROM_CODESTREAM() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .JXL_BIT_DEPTH_CUSTOM = 2;
     * }
     */
    public static int JXL_BIT_DEPTH_CUSTOM() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .kFrames = 0;
     * }
     */
    public static int kFrames() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .kDC = 1;
     * }
     */
    public static int kDC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .kLastPasses = 2;
     * }
     */
    public static int kLastPasses() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .kPasses = 3;
     * }
     */
    public static int kPasses() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .kDCProgressive = 4;
     * }
     */
    public static int kDCProgressive() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .kDCGroups = 5;
     * }
     */
    public static int kDCGroups() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .kGroups = 6;
     * }
     */
    public static int kGroups() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .JXL_ORIENT_IDENTITY = 1;
     * }
     */
    public static int JXL_ORIENT_IDENTITY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .JXL_ORIENT_FLIP_HORIZONTAL = 2;
     * }
     */
    public static int JXL_ORIENT_FLIP_HORIZONTAL() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .JXL_ORIENT_ROTATE_180 = 3;
     * }
     */
    public static int JXL_ORIENT_ROTATE_180() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .JXL_ORIENT_FLIP_VERTICAL = 4;
     * }
     */
    public static int JXL_ORIENT_FLIP_VERTICAL() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .JXL_ORIENT_TRANSPOSE = 5;
     * }
     */
    public static int JXL_ORIENT_TRANSPOSE() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .JXL_ORIENT_ROTATE_90_CW = 6;
     * }
     */
    public static int JXL_ORIENT_ROTATE_90_CW() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .JXL_ORIENT_ANTI_TRANSPOSE = 7;
     * }
     */
    public static int JXL_ORIENT_ANTI_TRANSPOSE() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .JXL_ORIENT_ROTATE_90_CCW = 8;
     * }
     */
    public static int JXL_ORIENT_ROTATE_90_CCW() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .JXL_CHANNEL_ALPHA = 0;
     * }
     */
    public static int JXL_CHANNEL_ALPHA() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .JXL_CHANNEL_DEPTH = 1;
     * }
     */
    public static int JXL_CHANNEL_DEPTH() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .JXL_CHANNEL_SPOT_COLOR = 2;
     * }
     */
    public static int JXL_CHANNEL_SPOT_COLOR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .JXL_CHANNEL_SELECTION_MASK = 3;
     * }
     */
    public static int JXL_CHANNEL_SELECTION_MASK() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .JXL_CHANNEL_BLACK = 4;
     * }
     */
    public static int JXL_CHANNEL_BLACK() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .JXL_CHANNEL_CFA = 5;
     * }
     */
    public static int JXL_CHANNEL_CFA() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .JXL_CHANNEL_THERMAL = 6;
     * }
     */
    public static int JXL_CHANNEL_THERMAL() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .JXL_CHANNEL_RESERVED0 = 7;
     * }
     */
    public static int JXL_CHANNEL_RESERVED0() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .JXL_CHANNEL_RESERVED1 = 8;
     * }
     */
    public static int JXL_CHANNEL_RESERVED1() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .JXL_CHANNEL_RESERVED2 = 9;
     * }
     */
    public static int JXL_CHANNEL_RESERVED2() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum .JXL_CHANNEL_RESERVED3 = 10;
     * }
     */
    public static int JXL_CHANNEL_RESERVED3() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum .JXL_CHANNEL_RESERVED4 = 11;
     * }
     */
    public static int JXL_CHANNEL_RESERVED4() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum .JXL_CHANNEL_RESERVED5 = 12;
     * }
     */
    public static int JXL_CHANNEL_RESERVED5() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum .JXL_CHANNEL_RESERVED6 = 13;
     * }
     */
    public static int JXL_CHANNEL_RESERVED6() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum .JXL_CHANNEL_RESERVED7 = 14;
     * }
     */
    public static int JXL_CHANNEL_RESERVED7() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum .JXL_CHANNEL_UNKNOWN = 15;
     * }
     */
    public static int JXL_CHANNEL_UNKNOWN() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum .JXL_CHANNEL_OPTIONAL = 16;
     * }
     */
    public static int JXL_CHANNEL_OPTIONAL() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum .JXL_BLEND_REPLACE = 0;
     * }
     */
    public static int JXL_BLEND_REPLACE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .JXL_BLEND_ADD = 1;
     * }
     */
    public static int JXL_BLEND_ADD() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .JXL_BLEND_BLEND = 2;
     * }
     */
    public static int JXL_BLEND_BLEND() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .JXL_BLEND_MULADD = 3;
     * }
     */
    public static int JXL_BLEND_MULADD() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .JXL_BLEND_MUL = 4;
     * }
     */
    public static int JXL_BLEND_MUL() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * typedef int JxlParallelRetCode;
     * }
     */
    public static final OfInt JxlParallelRetCode = Constants$root.C_INT$LAYOUT;
    public static MethodHandle JxlEncoderStatsCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$3.JxlEncoderStatsCreate$MH,"JxlEncoderStatsCreate");
    }
    /**
     * {@snippet :
     * JxlEncoderStats* JxlEncoderStatsCreate(,...);
     * }
     */
    public static MemorySegment JxlEncoderStatsCreate(Object... x0) {
        var mh$ = JxlEncoderStatsCreate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderStatsDestroy$MH() {
        return RuntimeHelper.requireNonNull(constants$3.JxlEncoderStatsDestroy$MH,"JxlEncoderStatsDestroy");
    }
    /**
     * {@snippet :
     * void JxlEncoderStatsDestroy(JxlEncoderStats* stats);
     * }
     */
    public static void JxlEncoderStatsDestroy(MemorySegment stats) {
        var mh$ = JxlEncoderStatsDestroy$MH();
        try {
            mh$.invokeExact(stats);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_STAT_HEADER_BITS = 0;
     * }
     */
    public static int JXL_ENC_STAT_HEADER_BITS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_STAT_TOC_BITS = 1;
     * }
     */
    public static int JXL_ENC_STAT_TOC_BITS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_STAT_DICTIONARY_BITS = 2;
     * }
     */
    public static int JXL_ENC_STAT_DICTIONARY_BITS() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_STAT_SPLINES_BITS = 3;
     * }
     */
    public static int JXL_ENC_STAT_SPLINES_BITS() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_STAT_NOISE_BITS = 4;
     * }
     */
    public static int JXL_ENC_STAT_NOISE_BITS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_STAT_QUANT_BITS = 5;
     * }
     */
    public static int JXL_ENC_STAT_QUANT_BITS() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_STAT_MODULAR_TREE_BITS = 6;
     * }
     */
    public static int JXL_ENC_STAT_MODULAR_TREE_BITS() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_STAT_MODULAR_GLOBAL_BITS = 7;
     * }
     */
    public static int JXL_ENC_STAT_MODULAR_GLOBAL_BITS() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_STAT_DC_BITS = 8;
     * }
     */
    public static int JXL_ENC_STAT_DC_BITS() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_STAT_MODULAR_DC_GROUP_BITS = 9;
     * }
     */
    public static int JXL_ENC_STAT_MODULAR_DC_GROUP_BITS() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_STAT_CONTROL_FIELDS_BITS = 10;
     * }
     */
    public static int JXL_ENC_STAT_CONTROL_FIELDS_BITS() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_STAT_COEF_ORDER_BITS = 11;
     * }
     */
    public static int JXL_ENC_STAT_COEF_ORDER_BITS() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_STAT_AC_HISTOGRAM_BITS = 12;
     * }
     */
    public static int JXL_ENC_STAT_AC_HISTOGRAM_BITS() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_STAT_AC_BITS = 13;
     * }
     */
    public static int JXL_ENC_STAT_AC_BITS() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_STAT_MODULAR_AC_GROUP_BITS = 14;
     * }
     */
    public static int JXL_ENC_STAT_MODULAR_AC_GROUP_BITS() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_STAT_NUM_SMALL_BLOCKS = 15;
     * }
     */
    public static int JXL_ENC_STAT_NUM_SMALL_BLOCKS() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_STAT_NUM_DCT4X8_BLOCKS = 16;
     * }
     */
    public static int JXL_ENC_STAT_NUM_DCT4X8_BLOCKS() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_STAT_NUM_AFV_BLOCKS = 17;
     * }
     */
    public static int JXL_ENC_STAT_NUM_AFV_BLOCKS() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_STAT_NUM_DCT8_BLOCKS = 18;
     * }
     */
    public static int JXL_ENC_STAT_NUM_DCT8_BLOCKS() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_STAT_NUM_DCT8X32_BLOCKS = 19;
     * }
     */
    public static int JXL_ENC_STAT_NUM_DCT8X32_BLOCKS() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_STAT_NUM_DCT16_BLOCKS = 20;
     * }
     */
    public static int JXL_ENC_STAT_NUM_DCT16_BLOCKS() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_STAT_NUM_DCT16X32_BLOCKS = 21;
     * }
     */
    public static int JXL_ENC_STAT_NUM_DCT16X32_BLOCKS() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_STAT_NUM_DCT32_BLOCKS = 22;
     * }
     */
    public static int JXL_ENC_STAT_NUM_DCT32_BLOCKS() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_STAT_NUM_DCT32X64_BLOCKS = 23;
     * }
     */
    public static int JXL_ENC_STAT_NUM_DCT32X64_BLOCKS() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_STAT_NUM_DCT64_BLOCKS = 24;
     * }
     */
    public static int JXL_ENC_STAT_NUM_DCT64_BLOCKS() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_STAT_NUM_BUTTERAUGLI_ITERS = 25;
     * }
     */
    public static int JXL_ENC_STAT_NUM_BUTTERAUGLI_ITERS() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_NUM_STATS = 26;
     * }
     */
    public static int JXL_ENC_NUM_STATS() {
        return (int)26L;
    }
    public static MethodHandle JxlEncoderStatsGet$MH() {
        return RuntimeHelper.requireNonNull(constants$3.JxlEncoderStatsGet$MH,"JxlEncoderStatsGet");
    }
    /**
     * {@snippet :
     * size_t JxlEncoderStatsGet(const JxlEncoderStats* stats, JxlEncoderStatsKey key);
     * }
     */
    public static long JxlEncoderStatsGet(MemorySegment stats, int key) {
        var mh$ = JxlEncoderStatsGet$MH();
        try {
            return (long)mh$.invokeExact(stats, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderStatsMerge$MH() {
        return RuntimeHelper.requireNonNull(constants$3.JxlEncoderStatsMerge$MH,"JxlEncoderStatsMerge");
    }
    /**
     * {@snippet :
     * void JxlEncoderStatsMerge(JxlEncoderStats* stats, const JxlEncoderStats* other);
     * }
     */
    public static void JxlEncoderStatsMerge(MemorySegment stats, MemorySegment other) {
        var mh$ = JxlEncoderStatsMerge$MH();
        try {
            mh$.invokeExact(stats, other);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$4.JxlEncoderVersion$MH,"JxlEncoderVersion");
    }
    /**
     * {@snippet :
     * uint32_t JxlEncoderVersion();
     * }
     */
    public static int JxlEncoderVersion() {
        var mh$ = JxlEncoderVersion$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_SUCCESS = 0;
     * }
     */
    public static int JXL_ENC_SUCCESS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_ERROR = 1;
     * }
     */
    public static int JXL_ENC_ERROR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_NEED_MORE_OUTPUT = 2;
     * }
     */
    public static int JXL_ENC_NEED_MORE_OUTPUT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_ERR_OK = 0;
     * }
     */
    public static int JXL_ENC_ERR_OK() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_ERR_GENERIC = 1;
     * }
     */
    public static int JXL_ENC_ERR_GENERIC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_ERR_OOM = 2;
     * }
     */
    public static int JXL_ENC_ERR_OOM() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_ERR_JBRD = 3;
     * }
     */
    public static int JXL_ENC_ERR_JBRD() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_ERR_BAD_INPUT = 4;
     * }
     */
    public static int JXL_ENC_ERR_BAD_INPUT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_ERR_NOT_SUPPORTED = 128;
     * }
     */
    public static int JXL_ENC_ERR_NOT_SUPPORTED() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_ERR_API_USAGE = 129;
     * }
     */
    public static int JXL_ENC_ERR_API_USAGE() {
        return (int)129L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_EFFORT = 0;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_EFFORT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_DECODING_SPEED = 1;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_DECODING_SPEED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_RESAMPLING = 2;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_RESAMPLING() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_EXTRA_CHANNEL_RESAMPLING = 3;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_EXTRA_CHANNEL_RESAMPLING() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_ALREADY_DOWNSAMPLED = 4;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_ALREADY_DOWNSAMPLED() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_PHOTON_NOISE = 5;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_PHOTON_NOISE() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_NOISE = 6;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_NOISE() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_DOTS = 7;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_DOTS() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_PATCHES = 8;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_PATCHES() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_EPF = 9;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_EPF() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_GABORISH = 10;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_GABORISH() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_MODULAR = 11;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_MODULAR() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_KEEP_INVISIBLE = 12;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_KEEP_INVISIBLE() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_GROUP_ORDER = 13;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_GROUP_ORDER() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_GROUP_ORDER_CENTER_X = 14;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_GROUP_ORDER_CENTER_X() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_GROUP_ORDER_CENTER_Y = 15;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_GROUP_ORDER_CENTER_Y() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_RESPONSIVE = 16;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_RESPONSIVE() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_PROGRESSIVE_AC = 17;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_PROGRESSIVE_AC() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_QPROGRESSIVE_AC = 18;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_QPROGRESSIVE_AC() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_PROGRESSIVE_DC = 19;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_PROGRESSIVE_DC() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_CHANNEL_COLORS_GLOBAL_PERCENT = 20;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_CHANNEL_COLORS_GLOBAL_PERCENT() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_CHANNEL_COLORS_GROUP_PERCENT = 21;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_CHANNEL_COLORS_GROUP_PERCENT() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_PALETTE_COLORS = 22;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_PALETTE_COLORS() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_LOSSY_PALETTE = 23;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_LOSSY_PALETTE() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_COLOR_TRANSFORM = 24;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_COLOR_TRANSFORM() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_MODULAR_COLOR_SPACE = 25;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_MODULAR_COLOR_SPACE() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_MODULAR_GROUP_SIZE = 26;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_MODULAR_GROUP_SIZE() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_MODULAR_PREDICTOR = 27;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_MODULAR_PREDICTOR() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_MODULAR_MA_TREE_LEARNING_PERCENT = 28;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_MODULAR_MA_TREE_LEARNING_PERCENT() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_MODULAR_NB_PREV_CHANNELS = 29;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_MODULAR_NB_PREV_CHANNELS() {
        return (int)29L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_JPEG_RECON_CFL = 30;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_JPEG_RECON_CFL() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_INDEX_BOX = 31;
     * }
     */
    public static int JXL_ENC_FRAME_INDEX_BOX() {
        return (int)31L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_BROTLI_EFFORT = 32;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_BROTLI_EFFORT() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_JPEG_COMPRESS_BOXES = 33;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_JPEG_COMPRESS_BOXES() {
        return (int)33L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_BUFFERING = 34;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_BUFFERING() {
        return (int)34L;
    }
    /**
     * {@snippet :
     * enum .JXL_ENC_FRAME_SETTING_FILL_ENUM = 65535;
     * }
     */
    public static int JXL_ENC_FRAME_SETTING_FILL_ENUM() {
        return (int)65535L;
    }
    public static MethodHandle JxlEncoderCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$4.JxlEncoderCreate$MH,"JxlEncoderCreate");
    }
    /**
     * {@snippet :
     * JxlEncoder* JxlEncoderCreate(const JxlMemoryManager* memory_manager);
     * }
     */
    public static MemorySegment JxlEncoderCreate(MemorySegment memory_manager) {
        var mh$ = JxlEncoderCreate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(memory_manager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderReset$MH() {
        return RuntimeHelper.requireNonNull(constants$4.JxlEncoderReset$MH,"JxlEncoderReset");
    }
    /**
     * {@snippet :
     * void JxlEncoderReset(JxlEncoder* enc);
     * }
     */
    public static void JxlEncoderReset(MemorySegment enc) {
        var mh$ = JxlEncoderReset$MH();
        try {
            mh$.invokeExact(enc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderDestroy$MH() {
        return RuntimeHelper.requireNonNull(constants$4.JxlEncoderDestroy$MH,"JxlEncoderDestroy");
    }
    /**
     * {@snippet :
     * void JxlEncoderDestroy(JxlEncoder* enc);
     * }
     */
    public static void JxlEncoderDestroy(MemorySegment enc) {
        var mh$ = JxlEncoderDestroy$MH();
        try {
            mh$.invokeExact(enc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderSetCms$MH() {
        return RuntimeHelper.requireNonNull(constants$4.JxlEncoderSetCms$MH,"JxlEncoderSetCms");
    }
    /**
     * {@snippet :
     * void JxlEncoderSetCms(JxlEncoder* enc, JxlCmsInterface cms);
     * }
     */
    public static void JxlEncoderSetCms(MemorySegment enc, MemorySegment cms) {
        var mh$ = JxlEncoderSetCms$MH();
        try {
            mh$.invokeExact(enc, cms);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderSetParallelRunner$MH() {
        return RuntimeHelper.requireNonNull(constants$4.JxlEncoderSetParallelRunner$MH,"JxlEncoderSetParallelRunner");
    }
    /**
     * {@snippet :
     * JxlEncoderStatus JxlEncoderSetParallelRunner(JxlEncoder* enc, JxlParallelRunner parallel_runner, void* parallel_runner_opaque);
     * }
     */
    public static int JxlEncoderSetParallelRunner(MemorySegment enc, MemorySegment parallel_runner, MemorySegment parallel_runner_opaque) {
        var mh$ = JxlEncoderSetParallelRunner$MH();
        try {
            return (int)mh$.invokeExact(enc, parallel_runner, parallel_runner_opaque);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderGetError$MH() {
        return RuntimeHelper.requireNonNull(constants$5.JxlEncoderGetError$MH,"JxlEncoderGetError");
    }
    /**
     * {@snippet :
     * JxlEncoderError JxlEncoderGetError(JxlEncoder* enc);
     * }
     */
    public static int JxlEncoderGetError(MemorySegment enc) {
        var mh$ = JxlEncoderGetError$MH();
        try {
            return (int)mh$.invokeExact(enc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderProcessOutput$MH() {
        return RuntimeHelper.requireNonNull(constants$5.JxlEncoderProcessOutput$MH,"JxlEncoderProcessOutput");
    }
    /**
     * {@snippet :
     * JxlEncoderStatus JxlEncoderProcessOutput(JxlEncoder* enc, uint8_t** next_out, size_t* avail_out);
     * }
     */
    public static int JxlEncoderProcessOutput(MemorySegment enc, MemorySegment next_out, MemorySegment avail_out) {
        var mh$ = JxlEncoderProcessOutput$MH();
        try {
            return (int)mh$.invokeExact(enc, next_out, avail_out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderSetFrameHeader$MH() {
        return RuntimeHelper.requireNonNull(constants$5.JxlEncoderSetFrameHeader$MH,"JxlEncoderSetFrameHeader");
    }
    /**
     * {@snippet :
     * JxlEncoderStatus JxlEncoderSetFrameHeader(JxlEncoderFrameSettings* frame_settings, const JxlFrameHeader* frame_header);
     * }
     */
    public static int JxlEncoderSetFrameHeader(MemorySegment frame_settings, MemorySegment frame_header) {
        var mh$ = JxlEncoderSetFrameHeader$MH();
        try {
            return (int)mh$.invokeExact(frame_settings, frame_header);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderSetExtraChannelBlendInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$5.JxlEncoderSetExtraChannelBlendInfo$MH,"JxlEncoderSetExtraChannelBlendInfo");
    }
    /**
     * {@snippet :
     * JxlEncoderStatus JxlEncoderSetExtraChannelBlendInfo(JxlEncoderFrameSettings* frame_settings, size_t index, const JxlBlendInfo* blend_info);
     * }
     */
    public static int JxlEncoderSetExtraChannelBlendInfo(MemorySegment frame_settings, long index, MemorySegment blend_info) {
        var mh$ = JxlEncoderSetExtraChannelBlendInfo$MH();
        try {
            return (int)mh$.invokeExact(frame_settings, index, blend_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderSetFrameName$MH() {
        return RuntimeHelper.requireNonNull(constants$5.JxlEncoderSetFrameName$MH,"JxlEncoderSetFrameName");
    }
    /**
     * {@snippet :
     * JxlEncoderStatus JxlEncoderSetFrameName(JxlEncoderFrameSettings* frame_settings, char* frame_name);
     * }
     */
    public static int JxlEncoderSetFrameName(MemorySegment frame_settings, MemorySegment frame_name) {
        var mh$ = JxlEncoderSetFrameName$MH();
        try {
            return (int)mh$.invokeExact(frame_settings, frame_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderSetFrameBitDepth$MH() {
        return RuntimeHelper.requireNonNull(constants$5.JxlEncoderSetFrameBitDepth$MH,"JxlEncoderSetFrameBitDepth");
    }
    /**
     * {@snippet :
     * JxlEncoderStatus JxlEncoderSetFrameBitDepth(JxlEncoderFrameSettings* frame_settings, const JxlBitDepth* bit_depth);
     * }
     */
    public static int JxlEncoderSetFrameBitDepth(MemorySegment frame_settings, MemorySegment bit_depth) {
        var mh$ = JxlEncoderSetFrameBitDepth$MH();
        try {
            return (int)mh$.invokeExact(frame_settings, bit_depth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderAddJPEGFrame$MH() {
        return RuntimeHelper.requireNonNull(constants$6.JxlEncoderAddJPEGFrame$MH,"JxlEncoderAddJPEGFrame");
    }
    /**
     * {@snippet :
     * JxlEncoderStatus JxlEncoderAddJPEGFrame(const JxlEncoderFrameSettings* frame_settings, const uint8_t* buffer, size_t size);
     * }
     */
    public static int JxlEncoderAddJPEGFrame(MemorySegment frame_settings, MemorySegment buffer, long size) {
        var mh$ = JxlEncoderAddJPEGFrame$MH();
        try {
            return (int)mh$.invokeExact(frame_settings, buffer, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderAddImageFrame$MH() {
        return RuntimeHelper.requireNonNull(constants$6.JxlEncoderAddImageFrame$MH,"JxlEncoderAddImageFrame");
    }
    /**
     * {@snippet :
     * JxlEncoderStatus JxlEncoderAddImageFrame(const JxlEncoderFrameSettings* frame_settings, const JxlPixelFormat* pixel_format, void* buffer, size_t size);
     * }
     */
    public static int JxlEncoderAddImageFrame(MemorySegment frame_settings, MemorySegment pixel_format, MemorySegment buffer, long size) {
        var mh$ = JxlEncoderAddImageFrame$MH();
        try {
            return (int)mh$.invokeExact(frame_settings, pixel_format, buffer, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderSetOutputCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$6.JxlEncoderSetOutputCallback$MH,"JxlEncoderSetOutputCallback");
    }
    /**
     * {@snippet :
     * JxlEncoderStatus JxlEncoderSetOutputCallback(JxlEncoderOutputCallback callback);
     * }
     */
    public static int JxlEncoderSetOutputCallback(MemorySegment callback) {
        var mh$ = JxlEncoderSetOutputCallback$MH();
        try {
            return (int)mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderChunkedImageFrameStart$MH() {
        return RuntimeHelper.requireNonNull(constants$6.JxlEncoderChunkedImageFrameStart$MH,"JxlEncoderChunkedImageFrameStart");
    }
    /**
     * {@snippet :
     * JxlEncoderStatus JxlEncoderChunkedImageFrameStart(const JxlEncoderFrameSettings* frame_settings);
     * }
     */
    public static int JxlEncoderChunkedImageFrameStart(MemorySegment frame_settings) {
        var mh$ = JxlEncoderChunkedImageFrameStart$MH();
        try {
            return (int)mh$.invokeExact(frame_settings);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderChunkedImageFrameAddPart$MH() {
        return RuntimeHelper.requireNonNull(constants$7.JxlEncoderChunkedImageFrameAddPart$MH,"JxlEncoderChunkedImageFrameAddPart");
    }
    /**
     * {@snippet :
     * JxlEncoderStatus JxlEncoderChunkedImageFrameAddPart(const JxlEncoderFrameSettings* frame_settings, size_t x, size_t y, const JxlPixelFormat* pixel_format, void* input_data, size_t input_size);
     * }
     */
    public static int JxlEncoderChunkedImageFrameAddPart(MemorySegment frame_settings, long x, long y, MemorySegment pixel_format, MemorySegment input_data, long input_size) {
        var mh$ = JxlEncoderChunkedImageFrameAddPart$MH();
        try {
            return (int)mh$.invokeExact(frame_settings, x, y, pixel_format, input_data, input_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderSetExtraChannelBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$7.JxlEncoderSetExtraChannelBuffer$MH,"JxlEncoderSetExtraChannelBuffer");
    }
    /**
     * {@snippet :
     * JxlEncoderStatus JxlEncoderSetExtraChannelBuffer(const JxlEncoderFrameSettings* frame_settings, const JxlPixelFormat* pixel_format, void* buffer, size_t size, uint32_t index);
     * }
     */
    public static int JxlEncoderSetExtraChannelBuffer(MemorySegment frame_settings, MemorySegment pixel_format, MemorySegment buffer, long size, int index) {
        var mh$ = JxlEncoderSetExtraChannelBuffer$MH();
        try {
            return (int)mh$.invokeExact(frame_settings, pixel_format, buffer, size, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderAddBox$MH() {
        return RuntimeHelper.requireNonNull(constants$7.JxlEncoderAddBox$MH,"JxlEncoderAddBox");
    }
    /**
     * {@snippet :
     * JxlEncoderStatus JxlEncoderAddBox(JxlEncoder* enc, const JxlBoxType type, const uint8_t* contents, size_t size, int compress_box);
     * }
     */
    public static int JxlEncoderAddBox(MemorySegment enc, MemorySegment type, MemorySegment contents, long size, int compress_box) {
        var mh$ = JxlEncoderAddBox$MH();
        try {
            return (int)mh$.invokeExact(enc, type, contents, size, compress_box);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderUseBoxes$MH() {
        return RuntimeHelper.requireNonNull(constants$7.JxlEncoderUseBoxes$MH,"JxlEncoderUseBoxes");
    }
    /**
     * {@snippet :
     * JxlEncoderStatus JxlEncoderUseBoxes(JxlEncoder* enc);
     * }
     */
    public static int JxlEncoderUseBoxes(MemorySegment enc) {
        var mh$ = JxlEncoderUseBoxes$MH();
        try {
            return (int)mh$.invokeExact(enc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderCloseBoxes$MH() {
        return RuntimeHelper.requireNonNull(constants$7.JxlEncoderCloseBoxes$MH,"JxlEncoderCloseBoxes");
    }
    /**
     * {@snippet :
     * void JxlEncoderCloseBoxes(JxlEncoder* enc);
     * }
     */
    public static void JxlEncoderCloseBoxes(MemorySegment enc) {
        var mh$ = JxlEncoderCloseBoxes$MH();
        try {
            mh$.invokeExact(enc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderCloseFrames$MH() {
        return RuntimeHelper.requireNonNull(constants$7.JxlEncoderCloseFrames$MH,"JxlEncoderCloseFrames");
    }
    /**
     * {@snippet :
     * void JxlEncoderCloseFrames(JxlEncoder* enc);
     * }
     */
    public static void JxlEncoderCloseFrames(MemorySegment enc) {
        var mh$ = JxlEncoderCloseFrames$MH();
        try {
            mh$.invokeExact(enc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderCloseInput$MH() {
        return RuntimeHelper.requireNonNull(constants$8.JxlEncoderCloseInput$MH,"JxlEncoderCloseInput");
    }
    /**
     * {@snippet :
     * void JxlEncoderCloseInput(JxlEncoder* enc);
     * }
     */
    public static void JxlEncoderCloseInput(MemorySegment enc) {
        var mh$ = JxlEncoderCloseInput$MH();
        try {
            mh$.invokeExact(enc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderSetColorEncoding$MH() {
        return RuntimeHelper.requireNonNull(constants$8.JxlEncoderSetColorEncoding$MH,"JxlEncoderSetColorEncoding");
    }
    /**
     * {@snippet :
     * JxlEncoderStatus JxlEncoderSetColorEncoding(JxlEncoder* enc, const JxlColorEncoding* color);
     * }
     */
    public static int JxlEncoderSetColorEncoding(MemorySegment enc, MemorySegment color) {
        var mh$ = JxlEncoderSetColorEncoding$MH();
        try {
            return (int)mh$.invokeExact(enc, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderSetICCProfile$MH() {
        return RuntimeHelper.requireNonNull(constants$8.JxlEncoderSetICCProfile$MH,"JxlEncoderSetICCProfile");
    }
    /**
     * {@snippet :
     * JxlEncoderStatus JxlEncoderSetICCProfile(JxlEncoder* enc, const uint8_t* icc_profile, size_t size);
     * }
     */
    public static int JxlEncoderSetICCProfile(MemorySegment enc, MemorySegment icc_profile, long size) {
        var mh$ = JxlEncoderSetICCProfile$MH();
        try {
            return (int)mh$.invokeExact(enc, icc_profile, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderInitBasicInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$8.JxlEncoderInitBasicInfo$MH,"JxlEncoderInitBasicInfo");
    }
    /**
     * {@snippet :
     * void JxlEncoderInitBasicInfo(JxlBasicInfo* info);
     * }
     */
    public static void JxlEncoderInitBasicInfo(MemorySegment info) {
        var mh$ = JxlEncoderInitBasicInfo$MH();
        try {
            mh$.invokeExact(info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderInitFrameHeader$MH() {
        return RuntimeHelper.requireNonNull(constants$8.JxlEncoderInitFrameHeader$MH,"JxlEncoderInitFrameHeader");
    }
    /**
     * {@snippet :
     * void JxlEncoderInitFrameHeader(JxlFrameHeader* frame_header);
     * }
     */
    public static void JxlEncoderInitFrameHeader(MemorySegment frame_header) {
        var mh$ = JxlEncoderInitFrameHeader$MH();
        try {
            mh$.invokeExact(frame_header);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderInitBlendInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$8.JxlEncoderInitBlendInfo$MH,"JxlEncoderInitBlendInfo");
    }
    /**
     * {@snippet :
     * void JxlEncoderInitBlendInfo(JxlBlendInfo* blend_info);
     * }
     */
    public static void JxlEncoderInitBlendInfo(MemorySegment blend_info) {
        var mh$ = JxlEncoderInitBlendInfo$MH();
        try {
            mh$.invokeExact(blend_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderSetBasicInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$9.JxlEncoderSetBasicInfo$MH,"JxlEncoderSetBasicInfo");
    }
    /**
     * {@snippet :
     * JxlEncoderStatus JxlEncoderSetBasicInfo(JxlEncoder* enc, const JxlBasicInfo* info);
     * }
     */
    public static int JxlEncoderSetBasicInfo(MemorySegment enc, MemorySegment info) {
        var mh$ = JxlEncoderSetBasicInfo$MH();
        try {
            return (int)mh$.invokeExact(enc, info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderInitExtraChannelInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$9.JxlEncoderInitExtraChannelInfo$MH,"JxlEncoderInitExtraChannelInfo");
    }
    /**
     * {@snippet :
     * void JxlEncoderInitExtraChannelInfo(JxlExtraChannelType type, JxlExtraChannelInfo* info);
     * }
     */
    public static void JxlEncoderInitExtraChannelInfo(int type, MemorySegment info) {
        var mh$ = JxlEncoderInitExtraChannelInfo$MH();
        try {
            mh$.invokeExact(type, info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderSetExtraChannelInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$9.JxlEncoderSetExtraChannelInfo$MH,"JxlEncoderSetExtraChannelInfo");
    }
    /**
     * {@snippet :
     * JxlEncoderStatus JxlEncoderSetExtraChannelInfo(JxlEncoder* enc, size_t index, const JxlExtraChannelInfo* info);
     * }
     */
    public static int JxlEncoderSetExtraChannelInfo(MemorySegment enc, long index, MemorySegment info) {
        var mh$ = JxlEncoderSetExtraChannelInfo$MH();
        try {
            return (int)mh$.invokeExact(enc, index, info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderSetExtraChannelName$MH() {
        return RuntimeHelper.requireNonNull(constants$9.JxlEncoderSetExtraChannelName$MH,"JxlEncoderSetExtraChannelName");
    }
    /**
     * {@snippet :
     * JxlEncoderStatus JxlEncoderSetExtraChannelName(JxlEncoder* enc, size_t index, char* name, size_t size);
     * }
     */
    public static int JxlEncoderSetExtraChannelName(MemorySegment enc, long index, MemorySegment name, long size) {
        var mh$ = JxlEncoderSetExtraChannelName$MH();
        try {
            return (int)mh$.invokeExact(enc, index, name, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderFrameSettingsSetOption$MH() {
        return RuntimeHelper.requireNonNull(constants$9.JxlEncoderFrameSettingsSetOption$MH,"JxlEncoderFrameSettingsSetOption");
    }
    /**
     * {@snippet :
     * JxlEncoderStatus JxlEncoderFrameSettingsSetOption(JxlEncoderFrameSettings* frame_settings, JxlEncoderFrameSettingId option, int64_t value);
     * }
     */
    public static int JxlEncoderFrameSettingsSetOption(MemorySegment frame_settings, int option, long value) {
        var mh$ = JxlEncoderFrameSettingsSetOption$MH();
        try {
            return (int)mh$.invokeExact(frame_settings, option, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderFrameSettingsSetFloatOption$MH() {
        return RuntimeHelper.requireNonNull(constants$9.JxlEncoderFrameSettingsSetFloatOption$MH,"JxlEncoderFrameSettingsSetFloatOption");
    }
    /**
     * {@snippet :
     * JxlEncoderStatus JxlEncoderFrameSettingsSetFloatOption(JxlEncoderFrameSettings* frame_settings, JxlEncoderFrameSettingId option, float value);
     * }
     */
    public static int JxlEncoderFrameSettingsSetFloatOption(MemorySegment frame_settings, int option, float value) {
        var mh$ = JxlEncoderFrameSettingsSetFloatOption$MH();
        try {
            return (int)mh$.invokeExact(frame_settings, option, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderUseContainer$MH() {
        return RuntimeHelper.requireNonNull(constants$10.JxlEncoderUseContainer$MH,"JxlEncoderUseContainer");
    }
    /**
     * {@snippet :
     * JxlEncoderStatus JxlEncoderUseContainer(JxlEncoder* enc, int use_container);
     * }
     */
    public static int JxlEncoderUseContainer(MemorySegment enc, int use_container) {
        var mh$ = JxlEncoderUseContainer$MH();
        try {
            return (int)mh$.invokeExact(enc, use_container);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderStoreJPEGMetadata$MH() {
        return RuntimeHelper.requireNonNull(constants$10.JxlEncoderStoreJPEGMetadata$MH,"JxlEncoderStoreJPEGMetadata");
    }
    /**
     * {@snippet :
     * JxlEncoderStatus JxlEncoderStoreJPEGMetadata(JxlEncoder* enc, int store_jpeg_metadata);
     * }
     */
    public static int JxlEncoderStoreJPEGMetadata(MemorySegment enc, int store_jpeg_metadata) {
        var mh$ = JxlEncoderStoreJPEGMetadata$MH();
        try {
            return (int)mh$.invokeExact(enc, store_jpeg_metadata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderSetCodestreamLevel$MH() {
        return RuntimeHelper.requireNonNull(constants$10.JxlEncoderSetCodestreamLevel$MH,"JxlEncoderSetCodestreamLevel");
    }
    /**
     * {@snippet :
     * JxlEncoderStatus JxlEncoderSetCodestreamLevel(JxlEncoder* enc, int level);
     * }
     */
    public static int JxlEncoderSetCodestreamLevel(MemorySegment enc, int level) {
        var mh$ = JxlEncoderSetCodestreamLevel$MH();
        try {
            return (int)mh$.invokeExact(enc, level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderGetRequiredCodestreamLevel$MH() {
        return RuntimeHelper.requireNonNull(constants$10.JxlEncoderGetRequiredCodestreamLevel$MH,"JxlEncoderGetRequiredCodestreamLevel");
    }
    /**
     * {@snippet :
     * int JxlEncoderGetRequiredCodestreamLevel(const JxlEncoder* enc);
     * }
     */
    public static int JxlEncoderGetRequiredCodestreamLevel(MemorySegment enc) {
        var mh$ = JxlEncoderGetRequiredCodestreamLevel$MH();
        try {
            return (int)mh$.invokeExact(enc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderSetFrameLossless$MH() {
        return RuntimeHelper.requireNonNull(constants$10.JxlEncoderSetFrameLossless$MH,"JxlEncoderSetFrameLossless");
    }
    /**
     * {@snippet :
     * JxlEncoderStatus JxlEncoderSetFrameLossless(JxlEncoderFrameSettings* frame_settings, int lossless);
     * }
     */
    public static int JxlEncoderSetFrameLossless(MemorySegment frame_settings, int lossless) {
        var mh$ = JxlEncoderSetFrameLossless$MH();
        try {
            return (int)mh$.invokeExact(frame_settings, lossless);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderSetFrameDistance$MH() {
        return RuntimeHelper.requireNonNull(constants$10.JxlEncoderSetFrameDistance$MH,"JxlEncoderSetFrameDistance");
    }
    /**
     * {@snippet :
     * JxlEncoderStatus JxlEncoderSetFrameDistance(JxlEncoderFrameSettings* frame_settings, float distance);
     * }
     */
    public static int JxlEncoderSetFrameDistance(MemorySegment frame_settings, float distance) {
        var mh$ = JxlEncoderSetFrameDistance$MH();
        try {
            return (int)mh$.invokeExact(frame_settings, distance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderSetExtraChannelDistance$MH() {
        return RuntimeHelper.requireNonNull(constants$11.JxlEncoderSetExtraChannelDistance$MH,"JxlEncoderSetExtraChannelDistance");
    }
    /**
     * {@snippet :
     * JxlEncoderStatus JxlEncoderSetExtraChannelDistance(JxlEncoderFrameSettings* frame_settings, size_t index, float distance);
     * }
     */
    public static int JxlEncoderSetExtraChannelDistance(MemorySegment frame_settings, long index, float distance) {
        var mh$ = JxlEncoderSetExtraChannelDistance$MH();
        try {
            return (int)mh$.invokeExact(frame_settings, index, distance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderFrameSettingsCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$11.JxlEncoderFrameSettingsCreate$MH,"JxlEncoderFrameSettingsCreate");
    }
    /**
     * {@snippet :
     * JxlEncoderFrameSettings* JxlEncoderFrameSettingsCreate(JxlEncoder* enc, const JxlEncoderFrameSettings* source);
     * }
     */
    public static MemorySegment JxlEncoderFrameSettingsCreate(MemorySegment enc, MemorySegment source) {
        var mh$ = JxlEncoderFrameSettingsCreate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(enc, source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlColorEncodingSetToSRGB$MH() {
        return RuntimeHelper.requireNonNull(constants$11.JxlColorEncodingSetToSRGB$MH,"JxlColorEncodingSetToSRGB");
    }
    /**
     * {@snippet :
     * void JxlColorEncodingSetToSRGB(JxlColorEncoding* color_encoding, int is_gray);
     * }
     */
    public static void JxlColorEncodingSetToSRGB(MemorySegment color_encoding, int is_gray) {
        var mh$ = JxlColorEncodingSetToSRGB$MH();
        try {
            mh$.invokeExact(color_encoding, is_gray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlColorEncodingSetToLinearSRGB$MH() {
        return RuntimeHelper.requireNonNull(constants$11.JxlColorEncodingSetToLinearSRGB$MH,"JxlColorEncodingSetToLinearSRGB");
    }
    /**
     * {@snippet :
     * void JxlColorEncodingSetToLinearSRGB(JxlColorEncoding* color_encoding, int is_gray);
     * }
     */
    public static void JxlColorEncodingSetToLinearSRGB(MemorySegment color_encoding, int is_gray) {
        var mh$ = JxlColorEncodingSetToLinearSRGB$MH();
        try {
            mh$.invokeExact(color_encoding, is_gray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderAllowExpertOptions$MH() {
        return RuntimeHelper.requireNonNull(constants$11.JxlEncoderAllowExpertOptions$MH,"JxlEncoderAllowExpertOptions");
    }
    /**
     * {@snippet :
     * void JxlEncoderAllowExpertOptions(JxlEncoder* enc);
     * }
     */
    public static void JxlEncoderAllowExpertOptions(MemorySegment enc) {
        var mh$ = JxlEncoderAllowExpertOptions$MH();
        try {
            mh$.invokeExact(enc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderSetDebugImageCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$12.JxlEncoderSetDebugImageCallback$MH,"JxlEncoderSetDebugImageCallback");
    }
    /**
     * {@snippet :
     * void JxlEncoderSetDebugImageCallback(JxlEncoderFrameSettings* frame_settings, JxlDebugImageCallback callback, void* opaque);
     * }
     */
    public static void JxlEncoderSetDebugImageCallback(MemorySegment frame_settings, MemorySegment callback, MemorySegment opaque) {
        var mh$ = JxlEncoderSetDebugImageCallback$MH();
        try {
            mh$.invokeExact(frame_settings, callback, opaque);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlEncoderCollectStats$MH() {
        return RuntimeHelper.requireNonNull(constants$12.JxlEncoderCollectStats$MH,"JxlEncoderCollectStats");
    }
    /**
     * {@snippet :
     * void JxlEncoderCollectStats(JxlEncoderFrameSettings* frame_settings, JxlEncoderStats* stats);
     * }
     */
    public static void JxlEncoderCollectStats(MemorySegment frame_settings, MemorySegment stats) {
        var mh$ = JxlEncoderCollectStats$MH();
        try {
            mh$.invokeExact(frame_settings, stats);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$12.JxlDecoderVersion$MH,"JxlDecoderVersion");
    }
    /**
     * {@snippet :
     * uint32_t JxlDecoderVersion();
     * }
     */
    public static int JxlDecoderVersion() {
        var mh$ = JxlDecoderVersion$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .JXL_SIG_NOT_ENOUGH_BYTES = 0;
     * }
     */
    public static int JXL_SIG_NOT_ENOUGH_BYTES() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .JXL_SIG_INVALID = 1;
     * }
     */
    public static int JXL_SIG_INVALID() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .JXL_SIG_CODESTREAM = 2;
     * }
     */
    public static int JXL_SIG_CODESTREAM() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .JXL_SIG_CONTAINER = 3;
     * }
     */
    public static int JXL_SIG_CONTAINER() {
        return (int)3L;
    }
    public static MethodHandle JxlSignatureCheck$MH() {
        return RuntimeHelper.requireNonNull(constants$12.JxlSignatureCheck$MH,"JxlSignatureCheck");
    }
    /**
     * {@snippet :
     * JxlSignature JxlSignatureCheck(const uint8_t* buf, size_t len);
     * }
     */
    public static int JxlSignatureCheck(MemorySegment buf, long len) {
        var mh$ = JxlSignatureCheck$MH();
        try {
            return (int)mh$.invokeExact(buf, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$12.JxlDecoderCreate$MH,"JxlDecoderCreate");
    }
    /**
     * {@snippet :
     * JxlDecoder* JxlDecoderCreate(const JxlMemoryManager* memory_manager);
     * }
     */
    public static MemorySegment JxlDecoderCreate(MemorySegment memory_manager) {
        var mh$ = JxlDecoderCreate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(memory_manager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderReset$MH() {
        return RuntimeHelper.requireNonNull(constants$13.JxlDecoderReset$MH,"JxlDecoderReset");
    }
    /**
     * {@snippet :
     * void JxlDecoderReset(JxlDecoder* dec);
     * }
     */
    public static void JxlDecoderReset(MemorySegment dec) {
        var mh$ = JxlDecoderReset$MH();
        try {
            mh$.invokeExact(dec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderDestroy$MH() {
        return RuntimeHelper.requireNonNull(constants$13.JxlDecoderDestroy$MH,"JxlDecoderDestroy");
    }
    /**
     * {@snippet :
     * void JxlDecoderDestroy(JxlDecoder* dec);
     * }
     */
    public static void JxlDecoderDestroy(MemorySegment dec) {
        var mh$ = JxlDecoderDestroy$MH();
        try {
            mh$.invokeExact(dec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .JXL_DEC_SUCCESS = 0;
     * }
     */
    public static int JXL_DEC_SUCCESS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .JXL_DEC_ERROR = 1;
     * }
     */
    public static int JXL_DEC_ERROR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .JXL_DEC_NEED_MORE_INPUT = 2;
     * }
     */
    public static int JXL_DEC_NEED_MORE_INPUT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .JXL_DEC_NEED_PREVIEW_OUT_BUFFER = 3;
     * }
     */
    public static int JXL_DEC_NEED_PREVIEW_OUT_BUFFER() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .JXL_DEC_NEED_IMAGE_OUT_BUFFER = 5;
     * }
     */
    public static int JXL_DEC_NEED_IMAGE_OUT_BUFFER() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .JXL_DEC_JPEG_NEED_MORE_OUTPUT = 6;
     * }
     */
    public static int JXL_DEC_JPEG_NEED_MORE_OUTPUT() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .JXL_DEC_BOX_NEED_MORE_OUTPUT = 7;
     * }
     */
    public static int JXL_DEC_BOX_NEED_MORE_OUTPUT() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .JXL_DEC_BASIC_INFO = 64;
     * }
     */
    public static int JXL_DEC_BASIC_INFO() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum .JXL_DEC_COLOR_ENCODING = 256;
     * }
     */
    public static int JXL_DEC_COLOR_ENCODING() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum .JXL_DEC_PREVIEW_IMAGE = 512;
     * }
     */
    public static int JXL_DEC_PREVIEW_IMAGE() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum .JXL_DEC_FRAME = 1024;
     * }
     */
    public static int JXL_DEC_FRAME() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum .JXL_DEC_FULL_IMAGE = 4096;
     * }
     */
    public static int JXL_DEC_FULL_IMAGE() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * enum .JXL_DEC_JPEG_RECONSTRUCTION = 8192;
     * }
     */
    public static int JXL_DEC_JPEG_RECONSTRUCTION() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * enum .JXL_DEC_BOX = 16384;
     * }
     */
    public static int JXL_DEC_BOX() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * enum .JXL_DEC_FRAME_PROGRESSION = 32768;
     * }
     */
    public static int JXL_DEC_FRAME_PROGRESSION() {
        return (int)32768L;
    }
    public static MethodHandle JxlDecoderRewind$MH() {
        return RuntimeHelper.requireNonNull(constants$13.JxlDecoderRewind$MH,"JxlDecoderRewind");
    }
    /**
     * {@snippet :
     * void JxlDecoderRewind(JxlDecoder* dec);
     * }
     */
    public static void JxlDecoderRewind(MemorySegment dec) {
        var mh$ = JxlDecoderRewind$MH();
        try {
            mh$.invokeExact(dec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSkipFrames$MH() {
        return RuntimeHelper.requireNonNull(constants$13.JxlDecoderSkipFrames$MH,"JxlDecoderSkipFrames");
    }
    /**
     * {@snippet :
     * void JxlDecoderSkipFrames(JxlDecoder* dec, size_t amount);
     * }
     */
    public static void JxlDecoderSkipFrames(MemorySegment dec, long amount) {
        var mh$ = JxlDecoderSkipFrames$MH();
        try {
            mh$.invokeExact(dec, amount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSkipCurrentFrame$MH() {
        return RuntimeHelper.requireNonNull(constants$13.JxlDecoderSkipCurrentFrame$MH,"JxlDecoderSkipCurrentFrame");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderSkipCurrentFrame(JxlDecoder* dec);
     * }
     */
    public static int JxlDecoderSkipCurrentFrame(MemorySegment dec) {
        var mh$ = JxlDecoderSkipCurrentFrame$MH();
        try {
            return (int)mh$.invokeExact(dec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSetParallelRunner$MH() {
        return RuntimeHelper.requireNonNull(constants$13.JxlDecoderSetParallelRunner$MH,"JxlDecoderSetParallelRunner");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderSetParallelRunner(JxlDecoder* dec, JxlParallelRunner parallel_runner, void* parallel_runner_opaque);
     * }
     */
    public static int JxlDecoderSetParallelRunner(MemorySegment dec, MemorySegment parallel_runner, MemorySegment parallel_runner_opaque) {
        var mh$ = JxlDecoderSetParallelRunner$MH();
        try {
            return (int)mh$.invokeExact(dec, parallel_runner, parallel_runner_opaque);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSizeHintBasicInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$14.JxlDecoderSizeHintBasicInfo$MH,"JxlDecoderSizeHintBasicInfo");
    }
    /**
     * {@snippet :
     * size_t JxlDecoderSizeHintBasicInfo(const JxlDecoder* dec);
     * }
     */
    public static long JxlDecoderSizeHintBasicInfo(MemorySegment dec) {
        var mh$ = JxlDecoderSizeHintBasicInfo$MH();
        try {
            return (long)mh$.invokeExact(dec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSubscribeEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$14.JxlDecoderSubscribeEvents$MH,"JxlDecoderSubscribeEvents");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderSubscribeEvents(JxlDecoder* dec, int events_wanted);
     * }
     */
    public static int JxlDecoderSubscribeEvents(MemorySegment dec, int events_wanted) {
        var mh$ = JxlDecoderSubscribeEvents$MH();
        try {
            return (int)mh$.invokeExact(dec, events_wanted);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSetKeepOrientation$MH() {
        return RuntimeHelper.requireNonNull(constants$14.JxlDecoderSetKeepOrientation$MH,"JxlDecoderSetKeepOrientation");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderSetKeepOrientation(JxlDecoder* dec, int skip_reorientation);
     * }
     */
    public static int JxlDecoderSetKeepOrientation(MemorySegment dec, int skip_reorientation) {
        var mh$ = JxlDecoderSetKeepOrientation$MH();
        try {
            return (int)mh$.invokeExact(dec, skip_reorientation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSetUnpremultiplyAlpha$MH() {
        return RuntimeHelper.requireNonNull(constants$14.JxlDecoderSetUnpremultiplyAlpha$MH,"JxlDecoderSetUnpremultiplyAlpha");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderSetUnpremultiplyAlpha(JxlDecoder* dec, int unpremul_alpha);
     * }
     */
    public static int JxlDecoderSetUnpremultiplyAlpha(MemorySegment dec, int unpremul_alpha) {
        var mh$ = JxlDecoderSetUnpremultiplyAlpha$MH();
        try {
            return (int)mh$.invokeExact(dec, unpremul_alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSetRenderSpotcolors$MH() {
        return RuntimeHelper.requireNonNull(constants$14.JxlDecoderSetRenderSpotcolors$MH,"JxlDecoderSetRenderSpotcolors");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderSetRenderSpotcolors(JxlDecoder* dec, int render_spotcolors);
     * }
     */
    public static int JxlDecoderSetRenderSpotcolors(MemorySegment dec, int render_spotcolors) {
        var mh$ = JxlDecoderSetRenderSpotcolors$MH();
        try {
            return (int)mh$.invokeExact(dec, render_spotcolors);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSetCoalescing$MH() {
        return RuntimeHelper.requireNonNull(constants$14.JxlDecoderSetCoalescing$MH,"JxlDecoderSetCoalescing");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderSetCoalescing(JxlDecoder* dec, int coalescing);
     * }
     */
    public static int JxlDecoderSetCoalescing(MemorySegment dec, int coalescing) {
        var mh$ = JxlDecoderSetCoalescing$MH();
        try {
            return (int)mh$.invokeExact(dec, coalescing);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderProcessInput$MH() {
        return RuntimeHelper.requireNonNull(constants$15.JxlDecoderProcessInput$MH,"JxlDecoderProcessInput");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderProcessInput(JxlDecoder* dec);
     * }
     */
    public static int JxlDecoderProcessInput(MemorySegment dec) {
        var mh$ = JxlDecoderProcessInput$MH();
        try {
            return (int)mh$.invokeExact(dec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSetInput$MH() {
        return RuntimeHelper.requireNonNull(constants$15.JxlDecoderSetInput$MH,"JxlDecoderSetInput");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderSetInput(JxlDecoder* dec, const uint8_t* data, size_t size);
     * }
     */
    public static int JxlDecoderSetInput(MemorySegment dec, MemorySegment data, long size) {
        var mh$ = JxlDecoderSetInput$MH();
        try {
            return (int)mh$.invokeExact(dec, data, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderReleaseInput$MH() {
        return RuntimeHelper.requireNonNull(constants$15.JxlDecoderReleaseInput$MH,"JxlDecoderReleaseInput");
    }
    /**
     * {@snippet :
     * size_t JxlDecoderReleaseInput(JxlDecoder* dec);
     * }
     */
    public static long JxlDecoderReleaseInput(MemorySegment dec) {
        var mh$ = JxlDecoderReleaseInput$MH();
        try {
            return (long)mh$.invokeExact(dec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderCloseInput$MH() {
        return RuntimeHelper.requireNonNull(constants$15.JxlDecoderCloseInput$MH,"JxlDecoderCloseInput");
    }
    /**
     * {@snippet :
     * void JxlDecoderCloseInput(JxlDecoder* dec);
     * }
     */
    public static void JxlDecoderCloseInput(MemorySegment dec) {
        var mh$ = JxlDecoderCloseInput$MH();
        try {
            mh$.invokeExact(dec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderGetBasicInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$15.JxlDecoderGetBasicInfo$MH,"JxlDecoderGetBasicInfo");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderGetBasicInfo(const JxlDecoder* dec, JxlBasicInfo* info);
     * }
     */
    public static int JxlDecoderGetBasicInfo(MemorySegment dec, MemorySegment info) {
        var mh$ = JxlDecoderGetBasicInfo$MH();
        try {
            return (int)mh$.invokeExact(dec, info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderGetExtraChannelInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$15.JxlDecoderGetExtraChannelInfo$MH,"JxlDecoderGetExtraChannelInfo");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderGetExtraChannelInfo(const JxlDecoder* dec, size_t index, JxlExtraChannelInfo* info);
     * }
     */
    public static int JxlDecoderGetExtraChannelInfo(MemorySegment dec, long index, MemorySegment info) {
        var mh$ = JxlDecoderGetExtraChannelInfo$MH();
        try {
            return (int)mh$.invokeExact(dec, index, info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderGetExtraChannelName$MH() {
        return RuntimeHelper.requireNonNull(constants$16.JxlDecoderGetExtraChannelName$MH,"JxlDecoderGetExtraChannelName");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderGetExtraChannelName(const JxlDecoder* dec, size_t index, char* name, size_t size);
     * }
     */
    public static int JxlDecoderGetExtraChannelName(MemorySegment dec, long index, MemorySegment name, long size) {
        var mh$ = JxlDecoderGetExtraChannelName$MH();
        try {
            return (int)mh$.invokeExact(dec, index, name, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .JXL_COLOR_PROFILE_TARGET_ORIGINAL = 0;
     * }
     */
    public static int JXL_COLOR_PROFILE_TARGET_ORIGINAL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .JXL_COLOR_PROFILE_TARGET_DATA = 1;
     * }
     */
    public static int JXL_COLOR_PROFILE_TARGET_DATA() {
        return (int)1L;
    }
    public static MethodHandle JxlDecoderGetColorAsEncodedProfile$MH() {
        return RuntimeHelper.requireNonNull(constants$16.JxlDecoderGetColorAsEncodedProfile$MH,"JxlDecoderGetColorAsEncodedProfile");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderGetColorAsEncodedProfile(const JxlDecoder* dec, JxlColorProfileTarget target, JxlColorEncoding* color_encoding);
     * }
     */
    public static int JxlDecoderGetColorAsEncodedProfile(MemorySegment dec, int target, MemorySegment color_encoding) {
        var mh$ = JxlDecoderGetColorAsEncodedProfile$MH();
        try {
            return (int)mh$.invokeExact(dec, target, color_encoding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderGetICCProfileSize$MH() {
        return RuntimeHelper.requireNonNull(constants$16.JxlDecoderGetICCProfileSize$MH,"JxlDecoderGetICCProfileSize");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderGetICCProfileSize(const JxlDecoder* dec, JxlColorProfileTarget target, size_t* size);
     * }
     */
    public static int JxlDecoderGetICCProfileSize(MemorySegment dec, int target, MemorySegment size) {
        var mh$ = JxlDecoderGetICCProfileSize$MH();
        try {
            return (int)mh$.invokeExact(dec, target, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderGetColorAsICCProfile$MH() {
        return RuntimeHelper.requireNonNull(constants$16.JxlDecoderGetColorAsICCProfile$MH,"JxlDecoderGetColorAsICCProfile");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderGetColorAsICCProfile(const JxlDecoder* dec, JxlColorProfileTarget target, uint8_t* icc_profile, size_t size);
     * }
     */
    public static int JxlDecoderGetColorAsICCProfile(MemorySegment dec, int target, MemorySegment icc_profile, long size) {
        var mh$ = JxlDecoderGetColorAsICCProfile$MH();
        try {
            return (int)mh$.invokeExact(dec, target, icc_profile, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSetPreferredColorProfile$MH() {
        return RuntimeHelper.requireNonNull(constants$16.JxlDecoderSetPreferredColorProfile$MH,"JxlDecoderSetPreferredColorProfile");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderSetPreferredColorProfile(JxlDecoder* dec, const JxlColorEncoding* color_encoding);
     * }
     */
    public static int JxlDecoderSetPreferredColorProfile(MemorySegment dec, MemorySegment color_encoding) {
        var mh$ = JxlDecoderSetPreferredColorProfile$MH();
        try {
            return (int)mh$.invokeExact(dec, color_encoding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSetDesiredIntensityTarget$MH() {
        return RuntimeHelper.requireNonNull(constants$16.JxlDecoderSetDesiredIntensityTarget$MH,"JxlDecoderSetDesiredIntensityTarget");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderSetDesiredIntensityTarget(JxlDecoder* dec, float desired_intensity_target);
     * }
     */
    public static int JxlDecoderSetDesiredIntensityTarget(MemorySegment dec, float desired_intensity_target) {
        var mh$ = JxlDecoderSetDesiredIntensityTarget$MH();
        try {
            return (int)mh$.invokeExact(dec, desired_intensity_target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSetOutputColorProfile$MH() {
        return RuntimeHelper.requireNonNull(constants$17.JxlDecoderSetOutputColorProfile$MH,"JxlDecoderSetOutputColorProfile");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderSetOutputColorProfile(JxlDecoder* dec, const JxlColorEncoding* color_encoding, const uint8_t* icc_data, size_t icc_size);
     * }
     */
    public static int JxlDecoderSetOutputColorProfile(MemorySegment dec, MemorySegment color_encoding, MemorySegment icc_data, long icc_size) {
        var mh$ = JxlDecoderSetOutputColorProfile$MH();
        try {
            return (int)mh$.invokeExact(dec, color_encoding, icc_data, icc_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSetCms$MH() {
        return RuntimeHelper.requireNonNull(constants$17.JxlDecoderSetCms$MH,"JxlDecoderSetCms");
    }
    /**
     * {@snippet :
     * void JxlDecoderSetCms(JxlDecoder* dec, JxlCmsInterface cms);
     * }
     */
    public static void JxlDecoderSetCms(MemorySegment dec, MemorySegment cms) {
        var mh$ = JxlDecoderSetCms$MH();
        try {
            mh$.invokeExact(dec, cms);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderPreviewOutBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$17.JxlDecoderPreviewOutBufferSize$MH,"JxlDecoderPreviewOutBufferSize");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderPreviewOutBufferSize(const JxlDecoder* dec, const JxlPixelFormat* format, size_t* size);
     * }
     */
    public static int JxlDecoderPreviewOutBufferSize(MemorySegment dec, MemorySegment format, MemorySegment size) {
        var mh$ = JxlDecoderPreviewOutBufferSize$MH();
        try {
            return (int)mh$.invokeExact(dec, format, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSetPreviewOutBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$17.JxlDecoderSetPreviewOutBuffer$MH,"JxlDecoderSetPreviewOutBuffer");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderSetPreviewOutBuffer(JxlDecoder* dec, const JxlPixelFormat* format, void* buffer, size_t size);
     * }
     */
    public static int JxlDecoderSetPreviewOutBuffer(MemorySegment dec, MemorySegment format, MemorySegment buffer, long size) {
        var mh$ = JxlDecoderSetPreviewOutBuffer$MH();
        try {
            return (int)mh$.invokeExact(dec, format, buffer, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderGetFrameHeader$MH() {
        return RuntimeHelper.requireNonNull(constants$17.JxlDecoderGetFrameHeader$MH,"JxlDecoderGetFrameHeader");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderGetFrameHeader(const JxlDecoder* dec, JxlFrameHeader* header);
     * }
     */
    public static int JxlDecoderGetFrameHeader(MemorySegment dec, MemorySegment header) {
        var mh$ = JxlDecoderGetFrameHeader$MH();
        try {
            return (int)mh$.invokeExact(dec, header);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderGetFrameName$MH() {
        return RuntimeHelper.requireNonNull(constants$17.JxlDecoderGetFrameName$MH,"JxlDecoderGetFrameName");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderGetFrameName(const JxlDecoder* dec, char* name, size_t size);
     * }
     */
    public static int JxlDecoderGetFrameName(MemorySegment dec, MemorySegment name, long size) {
        var mh$ = JxlDecoderGetFrameName$MH();
        try {
            return (int)mh$.invokeExact(dec, name, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderGetExtraChannelBlendInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$18.JxlDecoderGetExtraChannelBlendInfo$MH,"JxlDecoderGetExtraChannelBlendInfo");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderGetExtraChannelBlendInfo(const JxlDecoder* dec, size_t index, JxlBlendInfo* blend_info);
     * }
     */
    public static int JxlDecoderGetExtraChannelBlendInfo(MemorySegment dec, long index, MemorySegment blend_info) {
        var mh$ = JxlDecoderGetExtraChannelBlendInfo$MH();
        try {
            return (int)mh$.invokeExact(dec, index, blend_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderImageOutBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$18.JxlDecoderImageOutBufferSize$MH,"JxlDecoderImageOutBufferSize");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderImageOutBufferSize(const JxlDecoder* dec, const JxlPixelFormat* format, size_t* size);
     * }
     */
    public static int JxlDecoderImageOutBufferSize(MemorySegment dec, MemorySegment format, MemorySegment size) {
        var mh$ = JxlDecoderImageOutBufferSize$MH();
        try {
            return (int)mh$.invokeExact(dec, format, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSetImageOutBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$18.JxlDecoderSetImageOutBuffer$MH,"JxlDecoderSetImageOutBuffer");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderSetImageOutBuffer(JxlDecoder* dec, const JxlPixelFormat* format, void* buffer, size_t size);
     * }
     */
    public static int JxlDecoderSetImageOutBuffer(MemorySegment dec, MemorySegment format, MemorySegment buffer, long size) {
        var mh$ = JxlDecoderSetImageOutBuffer$MH();
        try {
            return (int)mh$.invokeExact(dec, format, buffer, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSetImageOutCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$19.JxlDecoderSetImageOutCallback$MH,"JxlDecoderSetImageOutCallback");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderSetImageOutCallback(JxlDecoder* dec, const JxlPixelFormat* format, JxlImageOutCallback callback, void* opaque);
     * }
     */
    public static int JxlDecoderSetImageOutCallback(MemorySegment dec, MemorySegment format, MemorySegment callback, MemorySegment opaque) {
        var mh$ = JxlDecoderSetImageOutCallback$MH();
        try {
            return (int)mh$.invokeExact(dec, format, callback, opaque);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSetMultithreadedImageOutCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$20.JxlDecoderSetMultithreadedImageOutCallback$MH,"JxlDecoderSetMultithreadedImageOutCallback");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderSetMultithreadedImageOutCallback(JxlDecoder* dec, const JxlPixelFormat* format, JxlImageOutInitCallback init_callback, JxlImageOutRunCallback run_callback, JxlImageOutDestroyCallback destroy_callback, void* init_opaque);
     * }
     */
    public static int JxlDecoderSetMultithreadedImageOutCallback(MemorySegment dec, MemorySegment format, MemorySegment init_callback, MemorySegment run_callback, MemorySegment destroy_callback, MemorySegment init_opaque) {
        var mh$ = JxlDecoderSetMultithreadedImageOutCallback$MH();
        try {
            return (int)mh$.invokeExact(dec, format, init_callback, run_callback, destroy_callback, init_opaque);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderExtraChannelBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$20.JxlDecoderExtraChannelBufferSize$MH,"JxlDecoderExtraChannelBufferSize");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderExtraChannelBufferSize(const JxlDecoder* dec, const JxlPixelFormat* format, size_t* size, uint32_t index);
     * }
     */
    public static int JxlDecoderExtraChannelBufferSize(MemorySegment dec, MemorySegment format, MemorySegment size, int index) {
        var mh$ = JxlDecoderExtraChannelBufferSize$MH();
        try {
            return (int)mh$.invokeExact(dec, format, size, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSetExtraChannelBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$20.JxlDecoderSetExtraChannelBuffer$MH,"JxlDecoderSetExtraChannelBuffer");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderSetExtraChannelBuffer(JxlDecoder* dec, const JxlPixelFormat* format, void* buffer, size_t size, uint32_t index);
     * }
     */
    public static int JxlDecoderSetExtraChannelBuffer(MemorySegment dec, MemorySegment format, MemorySegment buffer, long size, int index) {
        var mh$ = JxlDecoderSetExtraChannelBuffer$MH();
        try {
            return (int)mh$.invokeExact(dec, format, buffer, size, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSetJPEGBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$20.JxlDecoderSetJPEGBuffer$MH,"JxlDecoderSetJPEGBuffer");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderSetJPEGBuffer(JxlDecoder* dec, uint8_t* data, size_t size);
     * }
     */
    public static int JxlDecoderSetJPEGBuffer(MemorySegment dec, MemorySegment data, long size) {
        var mh$ = JxlDecoderSetJPEGBuffer$MH();
        try {
            return (int)mh$.invokeExact(dec, data, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderReleaseJPEGBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$20.JxlDecoderReleaseJPEGBuffer$MH,"JxlDecoderReleaseJPEGBuffer");
    }
    /**
     * {@snippet :
     * size_t JxlDecoderReleaseJPEGBuffer(JxlDecoder* dec);
     * }
     */
    public static long JxlDecoderReleaseJPEGBuffer(MemorySegment dec) {
        var mh$ = JxlDecoderReleaseJPEGBuffer$MH();
        try {
            return (long)mh$.invokeExact(dec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSetBoxBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$20.JxlDecoderSetBoxBuffer$MH,"JxlDecoderSetBoxBuffer");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderSetBoxBuffer(JxlDecoder* dec, uint8_t* data, size_t size);
     * }
     */
    public static int JxlDecoderSetBoxBuffer(MemorySegment dec, MemorySegment data, long size) {
        var mh$ = JxlDecoderSetBoxBuffer$MH();
        try {
            return (int)mh$.invokeExact(dec, data, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderReleaseBoxBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$21.JxlDecoderReleaseBoxBuffer$MH,"JxlDecoderReleaseBoxBuffer");
    }
    /**
     * {@snippet :
     * size_t JxlDecoderReleaseBoxBuffer(JxlDecoder* dec);
     * }
     */
    public static long JxlDecoderReleaseBoxBuffer(MemorySegment dec) {
        var mh$ = JxlDecoderReleaseBoxBuffer$MH();
        try {
            return (long)mh$.invokeExact(dec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSetDecompressBoxes$MH() {
        return RuntimeHelper.requireNonNull(constants$21.JxlDecoderSetDecompressBoxes$MH,"JxlDecoderSetDecompressBoxes");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderSetDecompressBoxes(JxlDecoder* dec, int decompress);
     * }
     */
    public static int JxlDecoderSetDecompressBoxes(MemorySegment dec, int decompress) {
        var mh$ = JxlDecoderSetDecompressBoxes$MH();
        try {
            return (int)mh$.invokeExact(dec, decompress);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderGetBoxType$MH() {
        return RuntimeHelper.requireNonNull(constants$21.JxlDecoderGetBoxType$MH,"JxlDecoderGetBoxType");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderGetBoxType(JxlDecoder* dec, JxlBoxType type, int decompressed);
     * }
     */
    public static int JxlDecoderGetBoxType(MemorySegment dec, MemorySegment type, int decompressed) {
        var mh$ = JxlDecoderGetBoxType$MH();
        try {
            return (int)mh$.invokeExact(dec, type, decompressed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderGetBoxSizeRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$21.JxlDecoderGetBoxSizeRaw$MH,"JxlDecoderGetBoxSizeRaw");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderGetBoxSizeRaw(const JxlDecoder* dec, uint64_t* size);
     * }
     */
    public static int JxlDecoderGetBoxSizeRaw(MemorySegment dec, MemorySegment size) {
        var mh$ = JxlDecoderGetBoxSizeRaw$MH();
        try {
            return (int)mh$.invokeExact(dec, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSetProgressiveDetail$MH() {
        return RuntimeHelper.requireNonNull(constants$21.JxlDecoderSetProgressiveDetail$MH,"JxlDecoderSetProgressiveDetail");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderSetProgressiveDetail(JxlDecoder* dec, JxlProgressiveDetail detail);
     * }
     */
    public static int JxlDecoderSetProgressiveDetail(MemorySegment dec, int detail) {
        var mh$ = JxlDecoderSetProgressiveDetail$MH();
        try {
            return (int)mh$.invokeExact(dec, detail);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderGetIntendedDownsamplingRatio$MH() {
        return RuntimeHelper.requireNonNull(constants$21.JxlDecoderGetIntendedDownsamplingRatio$MH,"JxlDecoderGetIntendedDownsamplingRatio");
    }
    /**
     * {@snippet :
     * size_t JxlDecoderGetIntendedDownsamplingRatio(JxlDecoder* dec);
     * }
     */
    public static long JxlDecoderGetIntendedDownsamplingRatio(MemorySegment dec) {
        var mh$ = JxlDecoderGetIntendedDownsamplingRatio$MH();
        try {
            return (long)mh$.invokeExact(dec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderFlushImage$MH() {
        return RuntimeHelper.requireNonNull(constants$22.JxlDecoderFlushImage$MH,"JxlDecoderFlushImage");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderFlushImage(JxlDecoder* dec);
     * }
     */
    public static int JxlDecoderFlushImage(MemorySegment dec) {
        var mh$ = JxlDecoderFlushImage$MH();
        try {
            return (int)mh$.invokeExact(dec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSetImageOutBitDepth$MH() {
        return RuntimeHelper.requireNonNull(constants$22.JxlDecoderSetImageOutBitDepth$MH,"JxlDecoderSetImageOutBitDepth");
    }
    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderSetImageOutBitDepth(JxlDecoder* dec, const JxlBitDepth* bit_depth);
     * }
     */
    public static int JxlDecoderSetImageOutBitDepth(MemorySegment dec, MemorySegment bit_depth) {
        var mh$ = JxlDecoderSetImageOutBitDepth$MH();
        try {
            return (int)mh$.invokeExact(dec, bit_depth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlThreadParallelRunner$MH() {
        return RuntimeHelper.requireNonNull(constants$22.JxlThreadParallelRunner$MH,"JxlThreadParallelRunner");
    }
    /**
     * {@snippet :
     * JxlParallelRetCode JxlThreadParallelRunner(void* runner_opaque, void* jpegxl_opaque, JxlParallelRunInit init, JxlParallelRunFunction func, uint32_t start_range, uint32_t end_range);
     * }
     */
    public static int JxlThreadParallelRunner(MemorySegment runner_opaque, MemorySegment jpegxl_opaque, MemorySegment init, MemorySegment func, int start_range, int end_range) {
        var mh$ = JxlThreadParallelRunner$MH();
        try {
            return (int)mh$.invokeExact(runner_opaque, jpegxl_opaque, init, func, start_range, end_range);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlThreadParallelRunnerCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$22.JxlThreadParallelRunnerCreate$MH,"JxlThreadParallelRunnerCreate");
    }
    /**
     * {@snippet :
     * void* JxlThreadParallelRunnerCreate(const JxlMemoryManager* memory_manager, size_t num_worker_threads);
     * }
     */
    public static MemorySegment JxlThreadParallelRunnerCreate(MemorySegment memory_manager, long num_worker_threads) {
        var mh$ = JxlThreadParallelRunnerCreate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(memory_manager, num_worker_threads);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlThreadParallelRunnerDestroy$MH() {
        return RuntimeHelper.requireNonNull(constants$22.JxlThreadParallelRunnerDestroy$MH,"JxlThreadParallelRunnerDestroy");
    }
    /**
     * {@snippet :
     * void JxlThreadParallelRunnerDestroy(void* runner_opaque);
     * }
     */
    public static void JxlThreadParallelRunnerDestroy(MemorySegment runner_opaque) {
        var mh$ = JxlThreadParallelRunnerDestroy$MH();
        try {
            mh$.invokeExact(runner_opaque);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlThreadParallelRunnerDefaultNumWorkerThreads$MH() {
        return RuntimeHelper.requireNonNull(constants$22.JxlThreadParallelRunnerDefaultNumWorkerThreads$MH,"JxlThreadParallelRunnerDefaultNumWorkerThreads");
    }
    /**
     * {@snippet :
     * size_t JxlThreadParallelRunnerDefaultNumWorkerThreads(,...);
     * }
     */
    public static long JxlThreadParallelRunnerDefaultNumWorkerThreads(Object... x0) {
        var mh$ = JxlThreadParallelRunnerDefaultNumWorkerThreads$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * #define JXL_PARALLEL_RET_RUNNER_ERROR -1
     * }
     */
    public static int JXL_PARALLEL_RET_RUNNER_ERROR() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define JPEGXL_NUMERIC_VERSION 589824
     * }
     */
    public static int JPEGXL_NUMERIC_VERSION() {
        return (int)589824L;
    }
}


