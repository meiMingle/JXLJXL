// Generated by jextract

package com.unascribed.jxljxl.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void* (*JxlImageOutInitCallback)(void* init_opaque,unsigned long num_threads,unsigned long num_pixels_per_thread);
 * }
 */
public interface JxlImageOutInitCallback {

    java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment init_opaque, long num_threads, long num_pixels_per_thread);
    static MemorySegment allocate(JxlImageOutInitCallback fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$18.JxlImageOutInitCallback_UP$MH, fi, constants$18.JxlImageOutInitCallback$FUNC, scope);
    }
    static JxlImageOutInitCallback ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _init_opaque, long _num_threads, long _num_pixels_per_thread) -> {
            try {
                return (java.lang.foreign.MemorySegment)constants$19.JxlImageOutInitCallback_DOWN$MH.invokeExact(symbol, _init_opaque, _num_threads, _num_pixels_per_thread);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


