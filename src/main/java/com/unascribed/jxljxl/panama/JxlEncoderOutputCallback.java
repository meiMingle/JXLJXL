// Generated by jextract

package com.unascribed.jxljxl.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*JxlEncoderOutputCallback)(void* run_opaque,unsigned long pos,unsigned long num_bytes);
 * }
 */
public interface JxlEncoderOutputCallback {

    void apply(java.lang.foreign.MemorySegment run_opaque, long pos, long num_bytes);
    static MemorySegment allocate(JxlEncoderOutputCallback fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$6.JxlEncoderOutputCallback_UP$MH, fi, constants$6.JxlEncoderOutputCallback$FUNC, scope);
    }
    static JxlEncoderOutputCallback ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _run_opaque, long _pos, long _num_bytes) -> {
            try {
                constants$6.JxlEncoderOutputCallback_DOWN$MH.invokeExact(symbol, _run_opaque, _pos, _num_bytes);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


