// Generated by jextract

package com.unascribed.jxljxl.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     JxlColorSpace color_space;
 *     JxlWhitePoint white_point;
 *     double white_point_xy[2];
 *     JxlPrimaries primaries;
 *     double primaries_red_xy[2];
 *     double primaries_green_xy[2];
 *     double primaries_blue_xy[2];
 *     JxlTransferFunction transfer_function;
 *     double gamma;
 *     JxlRenderingIntent rendering_intent;
 * };
 * }
 */
public class JxlColorEncoding {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("color_space"),
        Constants$root.C_INT$LAYOUT.withName("white_point"),
        MemoryLayout.sequenceLayout(2, Constants$root.C_DOUBLE$LAYOUT).withName("white_point_xy"),
        Constants$root.C_INT$LAYOUT.withName("primaries"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.sequenceLayout(2, Constants$root.C_DOUBLE$LAYOUT).withName("primaries_red_xy"),
        MemoryLayout.sequenceLayout(2, Constants$root.C_DOUBLE$LAYOUT).withName("primaries_green_xy"),
        MemoryLayout.sequenceLayout(2, Constants$root.C_DOUBLE$LAYOUT).withName("primaries_blue_xy"),
        Constants$root.C_INT$LAYOUT.withName("transfer_function"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_DOUBLE$LAYOUT.withName("gamma"),
        Constants$root.C_INT$LAYOUT.withName("rendering_intent"),
        MemoryLayout.paddingLayout(32)
    );
    public static MemoryLayout $LAYOUT() {
        return JxlColorEncoding.$struct$LAYOUT;
    }
    static final VarHandle color_space$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("color_space"));
    public static VarHandle color_space$VH() {
        return JxlColorEncoding.color_space$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * JxlColorSpace color_space;
     * }
     */
    public static int color_space$get(MemorySegment seg) {
        return (int)JxlColorEncoding.color_space$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * JxlColorSpace color_space;
     * }
     */
    public static void color_space$set(MemorySegment seg, int x) {
        JxlColorEncoding.color_space$VH.set(seg, x);
    }
    public static int color_space$get(MemorySegment seg, long index) {
        return (int)JxlColorEncoding.color_space$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void color_space$set(MemorySegment seg, long index, int x) {
        JxlColorEncoding.color_space$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle white_point$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("white_point"));
    public static VarHandle white_point$VH() {
        return JxlColorEncoding.white_point$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * JxlWhitePoint white_point;
     * }
     */
    public static int white_point$get(MemorySegment seg) {
        return (int)JxlColorEncoding.white_point$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * JxlWhitePoint white_point;
     * }
     */
    public static void white_point$set(MemorySegment seg, int x) {
        JxlColorEncoding.white_point$VH.set(seg, x);
    }
    public static int white_point$get(MemorySegment seg, long index) {
        return (int)JxlColorEncoding.white_point$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void white_point$set(MemorySegment seg, long index, int x) {
        JxlColorEncoding.white_point$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment white_point_xy$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    static final VarHandle primaries$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("primaries"));
    public static VarHandle primaries$VH() {
        return JxlColorEncoding.primaries$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * JxlPrimaries primaries;
     * }
     */
    public static int primaries$get(MemorySegment seg) {
        return (int)JxlColorEncoding.primaries$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * JxlPrimaries primaries;
     * }
     */
    public static void primaries$set(MemorySegment seg, int x) {
        JxlColorEncoding.primaries$VH.set(seg, x);
    }
    public static int primaries$get(MemorySegment seg, long index) {
        return (int)JxlColorEncoding.primaries$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void primaries$set(MemorySegment seg, long index, int x) {
        JxlColorEncoding.primaries$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment primaries_red_xy$slice(MemorySegment seg) {
        return seg.asSlice(32, 16);
    }
    public static MemorySegment primaries_green_xy$slice(MemorySegment seg) {
        return seg.asSlice(48, 16);
    }
    public static MemorySegment primaries_blue_xy$slice(MemorySegment seg) {
        return seg.asSlice(64, 16);
    }
    static final VarHandle transfer_function$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("transfer_function"));
    public static VarHandle transfer_function$VH() {
        return JxlColorEncoding.transfer_function$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * JxlTransferFunction transfer_function;
     * }
     */
    public static int transfer_function$get(MemorySegment seg) {
        return (int)JxlColorEncoding.transfer_function$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * JxlTransferFunction transfer_function;
     * }
     */
    public static void transfer_function$set(MemorySegment seg, int x) {
        JxlColorEncoding.transfer_function$VH.set(seg, x);
    }
    public static int transfer_function$get(MemorySegment seg, long index) {
        return (int)JxlColorEncoding.transfer_function$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void transfer_function$set(MemorySegment seg, long index, int x) {
        JxlColorEncoding.transfer_function$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle gamma$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("gamma"));
    public static VarHandle gamma$VH() {
        return JxlColorEncoding.gamma$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double gamma;
     * }
     */
    public static double gamma$get(MemorySegment seg) {
        return (double)JxlColorEncoding.gamma$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double gamma;
     * }
     */
    public static void gamma$set(MemorySegment seg, double x) {
        JxlColorEncoding.gamma$VH.set(seg, x);
    }
    public static double gamma$get(MemorySegment seg, long index) {
        return (double)JxlColorEncoding.gamma$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void gamma$set(MemorySegment seg, long index, double x) {
        JxlColorEncoding.gamma$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rendering_intent$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rendering_intent"));
    public static VarHandle rendering_intent$VH() {
        return JxlColorEncoding.rendering_intent$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * JxlRenderingIntent rendering_intent;
     * }
     */
    public static int rendering_intent$get(MemorySegment seg) {
        return (int)JxlColorEncoding.rendering_intent$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * JxlRenderingIntent rendering_intent;
     * }
     */
    public static void rendering_intent$set(MemorySegment seg, int x) {
        JxlColorEncoding.rendering_intent$VH.set(seg, x);
    }
    public static int rendering_intent$get(MemorySegment seg, long index) {
        return (int)JxlColorEncoding.rendering_intent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rendering_intent$set(MemorySegment seg, long index, int x) {
        JxlColorEncoding.rendering_intent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


