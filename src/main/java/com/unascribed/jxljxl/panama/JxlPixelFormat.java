// Generated by jextract

package com.unascribed.jxljxl.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     uint32_t num_channels;
 *     JxlDataType data_type;
 *     JxlEndianness endianness;
 *     size_t align;
 * };
 * }
 */
public class JxlPixelFormat {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("num_channels"),
        Constants$root.C_INT$LAYOUT.withName("data_type"),
        Constants$root.C_INT$LAYOUT.withName("endianness"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("align")
    );
    public static MemoryLayout $LAYOUT() {
        return JxlPixelFormat.$struct$LAYOUT;
    }
    static final VarHandle num_channels$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("num_channels"));
    public static VarHandle num_channels$VH() {
        return JxlPixelFormat.num_channels$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t num_channels;
     * }
     */
    public static int num_channels$get(MemorySegment seg) {
        return (int)JxlPixelFormat.num_channels$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t num_channels;
     * }
     */
    public static void num_channels$set(MemorySegment seg, int x) {
        JxlPixelFormat.num_channels$VH.set(seg, x);
    }
    public static int num_channels$get(MemorySegment seg, long index) {
        return (int)JxlPixelFormat.num_channels$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void num_channels$set(MemorySegment seg, long index, int x) {
        JxlPixelFormat.num_channels$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle data_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("data_type"));
    public static VarHandle data_type$VH() {
        return JxlPixelFormat.data_type$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * JxlDataType data_type;
     * }
     */
    public static int data_type$get(MemorySegment seg) {
        return (int)JxlPixelFormat.data_type$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * JxlDataType data_type;
     * }
     */
    public static void data_type$set(MemorySegment seg, int x) {
        JxlPixelFormat.data_type$VH.set(seg, x);
    }
    public static int data_type$get(MemorySegment seg, long index) {
        return (int)JxlPixelFormat.data_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void data_type$set(MemorySegment seg, long index, int x) {
        JxlPixelFormat.data_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle endianness$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("endianness"));
    public static VarHandle endianness$VH() {
        return JxlPixelFormat.endianness$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * JxlEndianness endianness;
     * }
     */
    public static int endianness$get(MemorySegment seg) {
        return (int)JxlPixelFormat.endianness$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * JxlEndianness endianness;
     * }
     */
    public static void endianness$set(MemorySegment seg, int x) {
        JxlPixelFormat.endianness$VH.set(seg, x);
    }
    public static int endianness$get(MemorySegment seg, long index) {
        return (int)JxlPixelFormat.endianness$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void endianness$set(MemorySegment seg, long index, int x) {
        JxlPixelFormat.endianness$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle align$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("align"));
    public static VarHandle align$VH() {
        return JxlPixelFormat.align$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t align;
     * }
     */
    public static long align$get(MemorySegment seg) {
        return (long)JxlPixelFormat.align$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t align;
     * }
     */
    public static void align$set(MemorySegment seg, long x) {
        JxlPixelFormat.align$VH.set(seg, x);
    }
    public static long align$get(MemorySegment seg, long index) {
        return (long)JxlPixelFormat.align$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void align$set(MemorySegment seg, long index, long x) {
        JxlPixelFormat.align$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


