// Generated by jextract

package com.unascribed.jxljxl.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     uint32_t duration;
 *     uint32_t timecode;
 *     uint32_t name_length;
 *     int is_last;
 *     JxlLayerInfo layer_info;
 * };
 * }
 */
public class JxlFrameHeader {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("duration"),
        Constants$root.C_INT$LAYOUT.withName("timecode"),
        Constants$root.C_INT$LAYOUT.withName("name_length"),
        Constants$root.C_INT$LAYOUT.withName("is_last"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("have_crop"),
            Constants$root.C_INT$LAYOUT.withName("crop_x0"),
            Constants$root.C_INT$LAYOUT.withName("crop_y0"),
            Constants$root.C_INT$LAYOUT.withName("xsize"),
            Constants$root.C_INT$LAYOUT.withName("ysize"),
            MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("blendmode"),
                Constants$root.C_INT$LAYOUT.withName("source"),
                Constants$root.C_INT$LAYOUT.withName("alpha"),
                Constants$root.C_INT$LAYOUT.withName("clamp")
            ).withName("blend_info"),
            Constants$root.C_INT$LAYOUT.withName("save_as_reference")
        ).withName("layer_info")
    );
    public static MemoryLayout $LAYOUT() {
        return JxlFrameHeader.$struct$LAYOUT;
    }
    static final VarHandle duration$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("duration"));
    public static VarHandle duration$VH() {
        return JxlFrameHeader.duration$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t duration;
     * }
     */
    public static int duration$get(MemorySegment seg) {
        return (int)JxlFrameHeader.duration$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t duration;
     * }
     */
    public static void duration$set(MemorySegment seg, int x) {
        JxlFrameHeader.duration$VH.set(seg, x);
    }
    public static int duration$get(MemorySegment seg, long index) {
        return (int)JxlFrameHeader.duration$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void duration$set(MemorySegment seg, long index, int x) {
        JxlFrameHeader.duration$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle timecode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("timecode"));
    public static VarHandle timecode$VH() {
        return JxlFrameHeader.timecode$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t timecode;
     * }
     */
    public static int timecode$get(MemorySegment seg) {
        return (int)JxlFrameHeader.timecode$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t timecode;
     * }
     */
    public static void timecode$set(MemorySegment seg, int x) {
        JxlFrameHeader.timecode$VH.set(seg, x);
    }
    public static int timecode$get(MemorySegment seg, long index) {
        return (int)JxlFrameHeader.timecode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void timecode$set(MemorySegment seg, long index, int x) {
        JxlFrameHeader.timecode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle name_length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("name_length"));
    public static VarHandle name_length$VH() {
        return JxlFrameHeader.name_length$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t name_length;
     * }
     */
    public static int name_length$get(MemorySegment seg) {
        return (int)JxlFrameHeader.name_length$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t name_length;
     * }
     */
    public static void name_length$set(MemorySegment seg, int x) {
        JxlFrameHeader.name_length$VH.set(seg, x);
    }
    public static int name_length$get(MemorySegment seg, long index) {
        return (int)JxlFrameHeader.name_length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void name_length$set(MemorySegment seg, long index, int x) {
        JxlFrameHeader.name_length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle is_last$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("is_last"));
    public static VarHandle is_last$VH() {
        return JxlFrameHeader.is_last$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int is_last;
     * }
     */
    public static int is_last$get(MemorySegment seg) {
        return (int)JxlFrameHeader.is_last$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int is_last;
     * }
     */
    public static void is_last$set(MemorySegment seg, int x) {
        JxlFrameHeader.is_last$VH.set(seg, x);
    }
    public static int is_last$get(MemorySegment seg, long index) {
        return (int)JxlFrameHeader.is_last$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_last$set(MemorySegment seg, long index, int x) {
        JxlFrameHeader.is_last$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment layer_info$slice(MemorySegment seg) {
        return seg.asSlice(16, 40);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


