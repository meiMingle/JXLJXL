// Generated by jextract

package com.unascribed.jxljxl.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     struct  icc;
 *     JxlColorEncoding color_encoding;
 *     size_t num_channels;
 * };
 * }
 */
public class JxlColorProfile {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("data"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("size")
        ).withName("icc"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("color_space"),
            Constants$root.C_INT$LAYOUT.withName("white_point"),
            MemoryLayout.sequenceLayout(2, Constants$root.C_DOUBLE$LAYOUT).withName("white_point_xy"),
            Constants$root.C_INT$LAYOUT.withName("primaries"),
            MemoryLayout.paddingLayout(32),
            MemoryLayout.sequenceLayout(2, Constants$root.C_DOUBLE$LAYOUT).withName("primaries_red_xy"),
            MemoryLayout.sequenceLayout(2, Constants$root.C_DOUBLE$LAYOUT).withName("primaries_green_xy"),
            MemoryLayout.sequenceLayout(2, Constants$root.C_DOUBLE$LAYOUT).withName("primaries_blue_xy"),
            Constants$root.C_INT$LAYOUT.withName("transfer_function"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_DOUBLE$LAYOUT.withName("gamma"),
            Constants$root.C_INT$LAYOUT.withName("rendering_intent"),
            MemoryLayout.paddingLayout(32)
        ).withName("color_encoding"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("num_channels")
    );
    public static MemoryLayout $LAYOUT() {
        return JxlColorProfile.$struct$LAYOUT;
    }
    /**
     * {@snippet :
     * struct {
     *     const uint8_t* data;
     *     size_t size;
     * };
     * }
     */
    public static final class icc {

        // Suppresses default constructor, ensuring non-instantiability.
        private icc() {}
        static final StructLayout icc$struct$LAYOUT = MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("data"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("size")
        );
        public static MemoryLayout $LAYOUT() {
            return icc.icc$struct$LAYOUT;
        }
        static final VarHandle data$VH = icc$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("data"));
        public static VarHandle data$VH() {
            return icc.data$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * const uint8_t* data;
         * }
         */
        public static MemorySegment data$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)icc.data$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * const uint8_t* data;
         * }
         */
        public static void data$set(MemorySegment seg, MemorySegment x) {
            icc.data$VH.set(seg, x);
        }
        public static MemorySegment data$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)icc.data$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void data$set(MemorySegment seg, long index, MemorySegment x) {
            icc.data$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle size$VH = icc$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("size"));
        public static VarHandle size$VH() {
            return icc.size$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * size_t size;
         * }
         */
        public static long size$get(MemorySegment seg) {
            return (long)icc.size$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * size_t size;
         * }
         */
        public static void size$set(MemorySegment seg, long x) {
            icc.size$VH.set(seg, x);
        }
        public static long size$get(MemorySegment seg, long index) {
            return (long)icc.size$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void size$set(MemorySegment seg, long index, long x) {
            icc.size$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment icc$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment color_encoding$slice(MemorySegment seg) {
        return seg.asSlice(16, 104);
    }
    static final VarHandle num_channels$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("num_channels"));
    public static VarHandle num_channels$VH() {
        return JxlColorProfile.num_channels$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t num_channels;
     * }
     */
    public static long num_channels$get(MemorySegment seg) {
        return (long)JxlColorProfile.num_channels$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t num_channels;
     * }
     */
    public static void num_channels$set(MemorySegment seg, long x) {
        JxlColorProfile.num_channels$VH.set(seg, x);
    }
    public static long num_channels$get(MemorySegment seg, long index) {
        return (long)JxlColorProfile.num_channels$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void num_channels$set(MemorySegment seg, long index, long x) {
        JxlColorProfile.num_channels$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


