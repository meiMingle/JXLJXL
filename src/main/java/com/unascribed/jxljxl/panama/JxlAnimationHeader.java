// Generated by jextract

package com.unascribed.jxljxl.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     uint32_t tps_numerator;
 *     uint32_t tps_denominator;
 *     uint32_t num_loops;
 *     int have_timecodes;
 * };
 * }
 */
public class JxlAnimationHeader {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("tps_numerator"),
        Constants$root.C_INT$LAYOUT.withName("tps_denominator"),
        Constants$root.C_INT$LAYOUT.withName("num_loops"),
        Constants$root.C_INT$LAYOUT.withName("have_timecodes")
    );
    public static MemoryLayout $LAYOUT() {
        return JxlAnimationHeader.$struct$LAYOUT;
    }
    static final VarHandle tps_numerator$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tps_numerator"));
    public static VarHandle tps_numerator$VH() {
        return JxlAnimationHeader.tps_numerator$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t tps_numerator;
     * }
     */
    public static int tps_numerator$get(MemorySegment seg) {
        return (int)JxlAnimationHeader.tps_numerator$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t tps_numerator;
     * }
     */
    public static void tps_numerator$set(MemorySegment seg, int x) {
        JxlAnimationHeader.tps_numerator$VH.set(seg, x);
    }
    public static int tps_numerator$get(MemorySegment seg, long index) {
        return (int)JxlAnimationHeader.tps_numerator$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tps_numerator$set(MemorySegment seg, long index, int x) {
        JxlAnimationHeader.tps_numerator$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tps_denominator$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tps_denominator"));
    public static VarHandle tps_denominator$VH() {
        return JxlAnimationHeader.tps_denominator$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t tps_denominator;
     * }
     */
    public static int tps_denominator$get(MemorySegment seg) {
        return (int)JxlAnimationHeader.tps_denominator$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t tps_denominator;
     * }
     */
    public static void tps_denominator$set(MemorySegment seg, int x) {
        JxlAnimationHeader.tps_denominator$VH.set(seg, x);
    }
    public static int tps_denominator$get(MemorySegment seg, long index) {
        return (int)JxlAnimationHeader.tps_denominator$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tps_denominator$set(MemorySegment seg, long index, int x) {
        JxlAnimationHeader.tps_denominator$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle num_loops$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("num_loops"));
    public static VarHandle num_loops$VH() {
        return JxlAnimationHeader.num_loops$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t num_loops;
     * }
     */
    public static int num_loops$get(MemorySegment seg) {
        return (int)JxlAnimationHeader.num_loops$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t num_loops;
     * }
     */
    public static void num_loops$set(MemorySegment seg, int x) {
        JxlAnimationHeader.num_loops$VH.set(seg, x);
    }
    public static int num_loops$get(MemorySegment seg, long index) {
        return (int)JxlAnimationHeader.num_loops$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void num_loops$set(MemorySegment seg, long index, int x) {
        JxlAnimationHeader.num_loops$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle have_timecodes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("have_timecodes"));
    public static VarHandle have_timecodes$VH() {
        return JxlAnimationHeader.have_timecodes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int have_timecodes;
     * }
     */
    public static int have_timecodes$get(MemorySegment seg) {
        return (int)JxlAnimationHeader.have_timecodes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int have_timecodes;
     * }
     */
    public static void have_timecodes$set(MemorySegment seg, int x) {
        JxlAnimationHeader.have_timecodes$VH.set(seg, x);
    }
    public static int have_timecodes$get(MemorySegment seg, long index) {
        return (int)JxlAnimationHeader.have_timecodes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void have_timecodes$set(MemorySegment seg, long index, int x) {
        JxlAnimationHeader.have_timecodes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


