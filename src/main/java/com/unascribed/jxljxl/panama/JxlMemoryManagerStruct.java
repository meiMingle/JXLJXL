// Generated by jextract

package com.unascribed.jxljxl.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct JxlMemoryManagerStruct {
 *     void* opaque;
 *     jpegxl_alloc_func alloc;
 *     jpegxl_free_func free;
 * };
 * }
 */
public class JxlMemoryManagerStruct {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("opaque"),
        Constants$root.C_POINTER$LAYOUT.withName("alloc"),
        Constants$root.C_POINTER$LAYOUT.withName("free")
    ).withName("JxlMemoryManagerStruct");
    public static MemoryLayout $LAYOUT() {
        return JxlMemoryManagerStruct.$struct$LAYOUT;
    }
    static final VarHandle opaque$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("opaque"));
    public static VarHandle opaque$VH() {
        return JxlMemoryManagerStruct.opaque$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* opaque;
     * }
     */
    public static MemorySegment opaque$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)JxlMemoryManagerStruct.opaque$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* opaque;
     * }
     */
    public static void opaque$set(MemorySegment seg, MemorySegment x) {
        JxlMemoryManagerStruct.opaque$VH.set(seg, x);
    }
    public static MemorySegment opaque$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)JxlMemoryManagerStruct.opaque$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void opaque$set(MemorySegment seg, long index, MemorySegment x) {
        JxlMemoryManagerStruct.opaque$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle alloc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("alloc"));
    public static VarHandle alloc$VH() {
        return JxlMemoryManagerStruct.alloc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * jpegxl_alloc_func alloc;
     * }
     */
    public static MemorySegment alloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)JxlMemoryManagerStruct.alloc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * jpegxl_alloc_func alloc;
     * }
     */
    public static void alloc$set(MemorySegment seg, MemorySegment x) {
        JxlMemoryManagerStruct.alloc$VH.set(seg, x);
    }
    public static MemorySegment alloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)JxlMemoryManagerStruct.alloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void alloc$set(MemorySegment seg, long index, MemorySegment x) {
        JxlMemoryManagerStruct.alloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static jpegxl_alloc_func alloc(MemorySegment segment, SegmentScope scope) {
        return jpegxl_alloc_func.ofAddress(alloc$get(segment), scope);
    }
    static final VarHandle free$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("free"));
    public static VarHandle free$VH() {
        return JxlMemoryManagerStruct.free$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * jpegxl_free_func free;
     * }
     */
    public static MemorySegment free$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)JxlMemoryManagerStruct.free$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * jpegxl_free_func free;
     * }
     */
    public static void free$set(MemorySegment seg, MemorySegment x) {
        JxlMemoryManagerStruct.free$VH.set(seg, x);
    }
    public static MemorySegment free$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)JxlMemoryManagerStruct.free$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void free$set(MemorySegment seg, long index, MemorySegment x) {
        JxlMemoryManagerStruct.free$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static jpegxl_free_func free(MemorySegment segment, SegmentScope scope) {
        return jpegxl_free_func.ofAddress(free$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


